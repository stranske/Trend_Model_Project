name: Reusable Python CI

on:
  workflow_call:
    inputs:
      python-versions: { description: 'JSON list Python versions', required: false, default: '["3.11"]', type: string }
      coverage-min: { description: 'Minimum coverage percent', required: false, default: '70', type: string }
      run-mypy: { description: 'Run mypy job', required: false, default: 'true', type: string }
      # Phase 1 – Metrics extraction inputs
      enable-metrics: { description: 'Enable metrics extraction (ci-metrics.json)', required: false, default: 'false', type: string }
      slow-test-top: { description: 'Count of slow tests to report', required: false, default: '15', type: string }
      slow-test-min-seconds: { description: 'Min seconds for slow test list', required: false, default: '1', type: string }
      # Phase 2 – Classification & history logging
      enable-classification: { description: 'Enable failure classification', required: false, default: 'false', type: string }
      enable-history: { description: 'Enable metrics history append', required: false, default: 'false', type: string }
      history-artifact-name: { description: 'Artifact name for metrics history', required: false, default: 'metrics-history.ndjson', type: string }
      # Phase 3 – Coverage delta
      enable-coverage-delta: { description: 'Enable coverage delta evaluation', required: false, default: 'false', type: string }
      baseline-coverage: { description: 'Baseline coverage percent', required: false, default: '0', type: string }
      coverage-alert-drop: { description: 'Coverage drop alert threshold (pct pts)', required: false, default: '1', type: string }
      fail-on-coverage-drop: { description: 'Fail if drop >= threshold', required: false, default: 'false', type: string }
      coverage-drop-label: { description: 'Label to add on drop (future)', required: false, default: 'coverage-drop', type: string }

jobs:
  tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ${{ fromJson(inputs.python-versions) }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install deps
        run: |
          python -m pip install -U pip
          pip install -r requirements.txt
          pip install pytest pytest-cov
      - name: Run tests with coverage
        run: |
          pytest --junitxml=pytest-junit.xml --cov=src --cov-report=xml:coverage.xml --cov-report=term-missing --cov-branch
      - name: Extract test metrics
        if: ${{ inputs.enable-metrics == 'true' }}
        run: |
          python scripts/ci_metrics.py || { echo "ci_metrics.py failed" >&2; exit 1; }
        env:
          JUNIT_PATH: pytest-junit.xml
          OUTPUT_PATH: ci-metrics.json
          TOP_N: ${{ inputs.slow-test-top }}
          MIN_SECONDS: ${{ inputs.slow-test-min-seconds }}
      - name: Upload metrics artifact
        if: ${{ inputs.enable-metrics == 'true' }}
        uses: actions/upload-artifact@v4
        with:
          name: ci-metrics
          path: ci-metrics.json
      - name: Enforce coverage minimum
        run: |
          if [ ! -f coverage.xml ]; then echo 'coverage.xml missing'; exit 1; fi
          RAW=$(grep -Eo 'line-rate="[0-9.]+' coverage.xml | head -1 | sed -E 's/.*"([0-9.]+)$/\1/')
          PCT=$(python -c "print('{:.2f}'.format(float('$RAW')*100.0))")
          echo "Current coverage: $PCT%"
          MIN=${{ inputs.coverage-min }}
          python -c "import sys; c=float('$PCT'); m=float('$MIN'); sys.exit(0 if c>=m else 1)" || { echo "Coverage $PCT% < min $MIN%" >&2; exit 1; }
      - name: Coverage delta
        if: ${{ inputs.enable-coverage-delta == 'true' }}
        run: |
          python scripts/ci_coverage_delta.py || exit 1
        env:
          BASELINE_COVERAGE: ${{ inputs.baseline-coverage }}
          ALERT_DROP: ${{ inputs.coverage-alert-drop }}
          FAIL_ON_DROP: ${{ inputs.fail-on-coverage-drop }}
      - name: Upload coverage delta artifact
        if: ${{ inputs.enable-coverage-delta == 'true' }}
        uses: actions/upload-artifact@v4
        with:
          name: coverage-delta
          path: coverage-delta.json
      - name: History & classification
        if: ${{ inputs.enable-history == 'true' || inputs.enable-classification == 'true' }}
        run: |
          python scripts/ci_history.py || { echo "ci_history.py failed" >&2; exit 1; }
        env:
          JUNIT_PATH: pytest-junit.xml
          METRICS_PATH: ci-metrics.json
          HISTORY_PATH: ${{ inputs.history-artifact-name }}
          ENABLE_CLASSIFICATION: ${{ inputs.enable-classification }}
          CLASSIFICATION_OUT: classification.json
      - name: Upload history artifact
        if: ${{ inputs.enable-history == 'true' }}
        uses: actions/upload-artifact@v4
        with:
          name: metrics-history
          path: ${{ inputs.history-artifact-name }}
      - name: Upload classification artifact
        if: ${{ inputs.enable-classification == 'true' }}
        uses: actions/upload-artifact@v4
        with:
          name: classification
          path: classification.json
      - name: CI summary
        run: |
          echo "## CI Summary" >> $GITHUB_STEP_SUMMARY
          if [ -f ci-metrics.json ]; then echo "- Metrics: present" >> $GITHUB_STEP_SUMMARY; else echo "- Metrics: (disabled)" >> $GITHUB_STEP_SUMMARY; fi
          if [ -f coverage-delta.json ]; then
            CUR=$(jq -r .current coverage-delta.json 2>/dev/null || echo '?')
            BASE=$(jq -r .baseline coverage-delta.json 2>/dev/null || echo '?')
            DELTA=$(jq -r .delta coverage-delta.json 2>/dev/null || echo '?')
            echo "- Coverage delta: current=$CUR baseline=$BASE delta=$DELTA" >> $GITHUB_STEP_SUMMARY
          else
            echo "- Coverage delta: (disabled)" >> $GITHUB_STEP_SUMMARY
          fi
          if [ -f classification.json ]; then echo "- Classification: present" >> $GITHUB_STEP_SUMMARY; else echo "- Classification: (disabled)" >> $GITHUB_STEP_SUMMARY; fi
          if [ -f ${{ inputs.history-artifact-name }} ]; then echo "- History: appended" >> $GITHUB_STEP_SUMMARY; else echo "- History: (disabled)" >> $GITHUB_STEP_SUMMARY; fi

  mypy:
    if: ${{ inputs.run-mypy == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install deps
        run: |
          python -m pip install -U pip
          pip install -r requirements.txt
          pip install mypy
      - name: Run mypy
        run: mypy src || (echo 'mypy failed' && exit 1)

