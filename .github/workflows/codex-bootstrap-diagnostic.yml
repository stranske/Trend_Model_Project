name: Codex Bootstrap Diagnostic

on:
  workflow_dispatch:
    inputs:
      issue:
        description: "(Optional) Issue number used to name diagnostic branch"
        required: false
      branch:
        description: "Explicit branch name to test (overrides auto naming)"
        required: false
      attempt_branch_create:
        description: "Set to true to attempt branch creation w/ fallback logic"
        required: false
        default: "false"
      dry_run:
        description: "If true, skip any mutating API calls (probe only)"
        required: false
        default: "false"
      pat_probe:
        description: "Run one-off PAT create-ref probe (true|false)"
        required: false
        default: "false"
      pat_probe_branch:
        description: "Branch name for PAT probe (leave empty to auto-generate)"
        required: false
        default: ""

concurrency:
  group: codex-bootstrap-diagnostic-${{ github.event.inputs.issue || github.event.inputs.branch || 'none' }}
  cancel-in-progress: false

permissions:
  contents: write         # Needed if we actually create a branch
  issues: read

jobs:
  probe:
    runs-on: ubuntu-latest
    name: Environment & Token Probe
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Bot permission on this repo
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const username = 'stranske-automation-bot';
            try {
              const resp = await github.request('GET /repos/{owner}/{repo}/collaborators/{username}/permission', { owner, repo, username });
              core.info('Bot permission check:');
              core.info(JSON.stringify(resp.data, null, 2));
              core.summary.addHeading('Bot Permission on Repo').addCodeBlock(JSON.stringify(resp.data, null, 2), 'json').write();
            } catch (e) {
              core.warning(`Permission check failed: ${e.status || '?'} ${e.message}`);
            }

      - name: Token / Env Probe
        id: probe
        shell: bash
        env:
          # Map the workflow token so the probe can actually see it
          GITHUB_TOKEN: ${{ github.token }}
          # Expose PAT secret for probe visibility (safe: value not printed)
          SERVICE_BOT_PAT: ${{ secrets.SERVICE_BOT_PAT }}
        run: |
          set -euo pipefail
          echo "Running Codex bootstrap diagnostics..."
          ISSUE_INPUT="${{ github.event.inputs.issue }}"
            BRANCH_INPUT="${{ github.event.inputs.branch }}"
          DRY_RUN="${{ github.event.inputs.dry_run }}"
          ATTEMPT_BRANCH_CREATE="${{ github.event.inputs.attempt_branch_create }}"
          TS=$(date -u +%Y%m%d%H%M%S)
          if [[ -n "$BRANCH_INPUT" ]]; then
            TARGET_BRANCH="$BRANCH_INPUT"
          elif [[ -n "$ISSUE_INPUT" ]]; then
            TARGET_BRANCH="diagnostic/codex-issue-${ISSUE_INPUT}"
          else
            TARGET_BRANCH="diagnostic/codex-${TS}"
          fi
          echo "target_branch=$TARGET_BRANCH" >> "$GITHUB_OUTPUT"

          has() { if [[ -n "${!1:-}" ]]; then echo present; else echo absent; fi; }
          SBP_STATE=$(has SERVICE_BOT_PAT)
          GT_STATE=$(has GITHUB_TOKEN)
          ADT_STATE=$(has ACTIONS_DEFAULT_TOKEN)
          echo "service_bot_pat=$SBP_STATE" >> "$GITHUB_OUTPUT"
          echo "github_token=$GT_STATE" >> "$GITHUB_OUTPUT"
          echo "actions_default_token=$ADT_STATE" >> "$GITHUB_OUTPUT"

          echo "### Codex Bootstrap Diagnostic" >> "$GITHUB_STEP_SUMMARY"
          echo "| Item | Status |" >> "$GITHUB_STEP_SUMMARY"
          echo "|------|--------|" >> "$GITHUB_STEP_SUMMARY"
          echo "| SERVICE_BOT_PAT | $SBP_STATE |" >> "$GITHUB_STEP_SUMMARY"
          echo "| GITHUB_TOKEN | $GT_STATE |" >> "$GITHUB_STEP_SUMMARY"
          echo "| ACTIONS_DEFAULT_TOKEN | $ADT_STATE |" >> "$GITHUB_STEP_SUMMARY"
          echo "| attempt_branch_create | $ATTEMPT_BRANCH_CREATE |" >> "$GITHUB_STEP_SUMMARY"
          echo "| dry_run | $DRY_RUN |" >> "$GITHUB_STEP_SUMMARY"

          # Resolve base branch without requiring API access
          BASE_BRANCH="${{ github.ref_name }}"
          if [[ -z "$BASE_BRANCH" ]]; then
            BASE_BRANCH=$(git remote show origin | sed -n 's/.*HEAD branch: //p' | tr -d '\n' || true)
          fi
          if [[ -z "$BASE_BRANCH" ]]; then BASE_BRANCH="main"; fi
          echo "base_branch=$BASE_BRANCH" >> "$GITHUB_OUTPUT"
          echo "| base_branch | $BASE_BRANCH |" >> "$GITHUB_STEP_SUMMARY"

          # Resolve base SHA via git (no tokens required for local ref)
          BASE_SHA=$(git rev-parse "origin/$BASE_BRANCH" 2>/dev/null || git rev-parse "$BASE_BRANCH" 2>/dev/null || echo '')
          if [[ -n "$BASE_SHA" ]]; then
            echo "base_sha=$BASE_SHA" >> "$GITHUB_OUTPUT"
            echo "| base_sha | $(echo "$BASE_SHA" | cut -c1-12) |" >> "$GITHUB_STEP_SUMMARY"
          else
            echo "base_sha_missing=true" >> "$GITHUB_OUTPUT"
            echo "| base_sha | (unresolved) |" >> "$GITHUB_STEP_SUMMARY"
          fi

      - name: Attempt Branch Create (PAT first, fallback tokens)
        if: ${{ steps.probe.outputs.base_sha != '' && github.event.inputs.attempt_branch_create == 'true' }}
        id: branch
        shell: bash
        env:
          TARGET_BRANCH: ${{ steps.probe.outputs.target_branch }}
          BASE_SHA: ${{ steps.probe.outputs.base_sha }}
          DRY_RUN: ${{ github.event.inputs.dry_run }}
          # Ensure default token is visible to the step
          GITHUB_TOKEN: ${{ github.token }}
          # Expose PAT secret so branch create can try PAT first
          SERVICE_BOT_PAT: ${{ secrets.SERVICE_BOT_PAT }}
        run: |
          set -euo pipefail
          echo "Testing branch create for $TARGET_BRANCH (dry_run=$DRY_RUN)"
          # If no tokens at all, do not attempt API calls; just report
          if [[ -z "${SERVICE_BOT_PAT:-}" && -z "${GITHUB_TOKEN:-}" && -z "${ACTIONS_DEFAULT_TOKEN:-}" ]]; then
            echo "no_tokens=true" >> "$GITHUB_OUTPUT"
            echo "No tokens present; skipping API branch creation attempts." >> "$GITHUB_STEP_SUMMARY"
            exit 0
          fi
          # If branch already exists, record and stop
          if git ls-remote --exit-code origin "refs/heads/${TARGET_BRANCH}" >/dev/null 2>&1; then
            echo "already_exists=true" >> "$GITHUB_OUTPUT"
            echo "Branch already exists." >> "$GITHUB_STEP_SUMMARY"
            exit 0
          fi
          if [[ "$DRY_RUN" == "true" ]]; then
            echo "dry_run=true" >> "$GITHUB_OUTPUT"
            echo "Skipping actual create (dry run)." >> "$GITHUB_STEP_SUMMARY"
            exit 0
          fi
          api_create() {
            local token_name="$1"; shift
            local token_val="$1"; shift
            if [[ -z "$token_val" ]]; then return 1; fi
            echo "Attempt create with $token_name" >> "$GITHUB_STEP_SUMMARY"
            local code
            # Try Bearer then token header styles
            code=$(curl -s -o /tmp/create_resp.json -w '%{http_code}' -X POST \
              -H "Authorization: Bearer $token_val" \
              -H 'Accept: application/vnd.github+json' \
              https://api.github.com/repos/${{ github.repository }}/git/refs \
              -d "{\"ref\":\"refs/heads/${TARGET_BRANCH}\",\"sha\":\"${BASE_SHA}\"}") || true
            if [[ "$code" != "201" ]]; then
              code=$(curl -s -o /tmp/create_resp.json -w '%{http_code}' -X POST \
                -H "Authorization: token $token_val" \
                -H 'Accept: application/vnd.github+json' \
                https://api.github.com/repos/${{ github.repository }}/git/refs \
                -d "{\"ref\":\"refs/heads/${TARGET_BRANCH}\",\"sha\":\"${BASE_SHA}\"}") || true
            fi
            if [[ "$code" == "201" ]]; then
              echo "created_by=$token_name" >> "$GITHUB_OUTPUT"
              echo "Creation succeeded with $token_name" >> "$GITHUB_STEP_SUMMARY"
              return 0
            fi
            echo "Creation failed with $token_name (http=$code)" >> "$GITHUB_STEP_SUMMARY"
            return 1
          }
          # Order: SERVICE_BOT_PAT -> GITHUB_TOKEN -> ACTIONS_DEFAULT_TOKEN
          api_create SERVICE_BOT_PAT "${SERVICE_BOT_PAT:-}" || \
          api_create GITHUB_TOKEN "${GITHUB_TOKEN:-}" || \
          api_create ACTIONS_DEFAULT_TOKEN "${ACTIONS_DEFAULT_TOKEN:-}" || true
          # Final existence check
          if git ls-remote --exit-code origin "refs/heads/${TARGET_BRANCH}" >/dev/null 2>&1; then
            echo "created=true" >> "$GITHUB_OUTPUT"
          else
            echo "created=false" >> "$GITHUB_OUTPUT"
          fi

      - name: One-off PAT create-ref probe
        if: ${{ steps.probe.outputs.base_sha != '' && github.event.inputs.pat_probe == 'true' }}
        id: pat_probe
        shell: bash
        env:
          BASE_SHA: ${{ steps.probe.outputs.base_sha }}
          SERVICE_BOT_PAT: ${{ secrets.SERVICE_BOT_PAT }}
        run: |
            set -euo pipefail
            echo "Testing PAT create-ref one-off"
            if [[ -z "${SERVICE_BOT_PAT:-}" ]]; then
              echo "No SERVICE_BOT_PAT present; skipping." >> "$GITHUB_STEP_SUMMARY"; exit 0;
            fi
            TS=$(date -u +%Y%m%d%H%M%S)
            BRANCH_INPUT="${{ github.event.inputs.pat_probe_branch }}"
            TARGET_BRANCH=${BRANCH_INPUT:-"diagnostic/pat-probe-${TS}"}
            echo "target_branch=$TARGET_BRANCH" >> "$GITHUB_OUTPUT"
            URL="https://api.github.com/repos/${{ github.repository }}/git/refs"
            payload="{\"ref\":\"refs/heads/${TARGET_BRANCH}\",\"sha\":\"${BASE_SHA}\"}"
            code1=$(curl -s -o /tmp/pat1.json -w '%{http_code}' -X POST \
              -H "Authorization: Bearer ${SERVICE_BOT_PAT}" -H 'Accept: application/vnd.github+json' "$URL" -d "$payload" || true)
            if [[ "$code1" != "201" ]]; then
              code2=$(curl -s -o /tmp/pat2.json -w '%{http_code}' -X POST \
                -H "Authorization: token ${SERVICE_BOT_PAT}" -H 'Accept: application/vnd.github+json' "$URL" -d "$payload" || true)
            else
              code2="$code1"
            fi
            short1=$(sed -E 's/\s+/ /g' /tmp/pat1.json | cut -c1-300 || true)
            short2=$(sed -E 's/\s+/ /g' /tmp/pat2.json | cut -c1-300 || true)
            echo "code1=$code1" >> "$GITHUB_OUTPUT"
            echo "code2=$code2" >> "$GITHUB_OUTPUT"
            {
              echo "### PAT Create-Ref Probe";
              echo "- target_branch: $TARGET_BRANCH";
              echo "- bearer_attempt: http=$code1 body=${short1}";
              echo "- token_attempt:  http=$code2 body=${short2}";
            } >> "$GITHUB_STEP_SUMMARY"

      - name: Diagnostic Summary
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            // 'core' is provided by the runtime; do not redeclare it
            core.summary
              .addHeading('Codex Bootstrap Diagnostic – Complete')
              .addQuote('See above sections for detailed probe and branch creation attempts.')
              .write();
