name: Codex Assign Minimal (fixed)

on:
  issues:
    types: [labeled, reopened]

permissions:
  contents: write
  pull-requests: write
  issues: write

concurrency:
  group: codex-assign-${{ github.event.issue.number }}
  cancel-in-progress: false

jobs:
  minimal:
    if: contains(github.event.issue.labels.*.name, 'agent:codex')
    runs-on: ubuntu-latest
    steps:
      # For issues events, checkout defaults to the repo's default branch.
      - name: Checkout repository (default branch)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Use local Codex bootstrap composite (concise)
        id: local_action
        continue-on-error: true
        uses: ./.github/actions/codex-bootstrap
        with:
          issue: ${{ github.event.issue.number }}
          service_bot_pat: ${{ secrets.SERVICE_BOT_PAT }}
          allow_fallback: true
          codex_command: 'codex: start'

      # Fallback path in case the local composite fails for any reason
      - name: Get default branch name
        if: ${{ steps.local_action.outcome == 'failure' }}
        id: def
        uses: actions/github-script@v7
        with:
          script: |
            const {owner, repo} = context.repo;
            const {data} = await github.rest.repos.get({owner, repo});
            core.setOutput('default', data.default_branch || 'main');

      - name: Create branch and bootstrap marker (fallback)
        if: ${{ steps.local_action.outcome == 'failure' }}
        id: mk
        env:
          ISSUE: ${{ github.event.issue.number }}
        run: |
          set -euo pipefail
          BR=agents/codex-issue-${ISSUE}-${GITHUB_RUN_ID}
          git config user.name  "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git checkout -B "$BR"
          mkdir -p agents
          printf "<!-- bootstrap for codex on issue #%s -->\n" "$ISSUE" > "agents/codex-${ISSUE}.md"
          git add "agents/codex-${ISSUE}.md"
          git commit -m "chore(codex): bootstrap PR for issue #${ISSUE}" || echo "No changes to commit"
          git push -u origin "$BR" --force-with-lease
          echo "branch=$BR" >> "$GITHUB_OUTPUT"

      - name: Open or reuse draft PR (fallback)
        if: ${{ steps.local_action.outcome == 'failure' }}
        id: pr
        uses: actions/github-script@v7
        env:
          BRANCH: ${{ steps.mk.outputs.branch }}
        with:
          script: |
            const {owner, repo} = context.repo;
            const issue_number = context.payload.issue.number;
            const base = "${{ steps.def.outputs.default }}";
            const head = process.env.BRANCH;
            const existing = await github.rest.pulls.list({ owner, repo, state: 'open', head: `${owner}:${head}` });
            let pr = existing.data[0];
            if (!pr) {
              ({ data: pr } = await github.rest.pulls.create({
                owner, repo, head, base, draft: true,
                title: `Codex bootstrap for #${issue_number}`,
                body: `Refs #${issue_number}\n\nDraft PR created to engage Codex on this task.`
              }));
            }
            core.setOutput('number', String(pr.number));

      - name: Label PR with agent:codex (fallback)
        if: ${{ steps.local_action.outcome == 'failure' }}
        uses: actions/github-script@v7
        env:
          PR: ${{ steps.pr.outputs.number }}
        with:
          script: |
            const {owner, repo} = context.repo;
            const prNumber = Number(process.env.PR);
            await github.rest.issues.addLabels({ owner, repo, issue_number: prNumber, labels: ['agent:codex'] });

      - name: Post Codex command as service user (fallback preferred)
        if: ${{ steps.local_action.outcome == 'failure' && secrets.SERVICE_BOT_PAT != '' }}
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.SERVICE_BOT_PAT }}
          script: |
            const {owner, repo} = context.repo;
            const prNumber = Number("${{ steps.pr.outputs.number }}");
            const cmd = 'codex: start';
            await github.rest.issues.createComment({ owner, repo, issue_number: prNumber, body: `${cmd}` });

      - name: Post Codex command as github-actions (fallback)
        if: ${{ steps.local_action.outcome == 'failure' && secrets.SERVICE_BOT_PAT == '' }}
        uses: actions/github-script@v7
        with:
          script: |
            const {owner, repo} = context.repo;
            const prNumber = Number("${{ steps.pr.outputs.number }}");
            const cmd = 'codex: start';
            await github.rest.issues.createComment({ owner, repo, issue_number: prNumber, body: `${cmd}` });

      - name: Link PR back to source issue (fallback)
        if: ${{ steps.local_action.outcome == 'failure' }}
        uses: actions/github-script@v7
        with:
          script: |
            const {owner, repo} = context.repo;
            await github.rest.issues.createComment({ owner, repo, issue_number: context.payload.issue.number, body: `Opened draft PR #${{ steps.pr.outputs.number }} to engage Codex. Track work there.` });
