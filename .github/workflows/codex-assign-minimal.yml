name: Codex Assign Minimal (fixed)

on:
  issues:
    types: [labeled, reopened]

permissions:
  contents: write
  pull-requests: write
  issues: write

concurrency:
  group: codex-assign-${{ github.event.issue.number }}
  cancel-in-progress: false

jobs:
  minimal:
    if: contains(github.event.issue.labels.*.name, 'agent:codex')
    runs-on: ubuntu-latest
    steps:
      # For issues events, checkout defaults to the repo's default branch.
      - name: Checkout repository (default branch)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Use local Codex bootstrap composite (concise)
        id: local_action
        continue-on-error: true
        uses: ./.github/actions/codex-bootstrap
        with:
          issue: ${{ github.event.issue.number }}
          service_bot_pat: ${{ secrets.SERVICE_BOT_PAT }}
          allow_fallback: true
          codex_command: 'codex: start'

      # Fallback path in case the local composite fails for any reason
      - name: Get default branch name
        if: ${{ steps.local_action.outcome == 'failure' }}
        id: def
        uses: actions/github-script@v7
        with:
          script: |
            const inputs = context.payload.inputs || {};
            const manualIssueRaw = (inputs.test_issue || '').trim();
            const manualIssue = manualIssueRaw && /^(\d+)$/.test(manualIssueRaw) ? manualIssueRaw : '';
            if (manualIssueRaw && !manualIssue) { core.warning(`Ignoring non-numeric test_issue input: '${manualIssueRaw}'`); }
            const simulated = (inputs.simulate_label || '').split(',').map(s => s.trim()).filter(Boolean);
            const issue = context.payload.issue;
            let needs = 'false'; let num = ''; let reason = 'no-issue-context';
            let labels = [];
            const allowFallbackOverride = (inputs.allow_fallback || '').trim();
            const codexCommand = (inputs.codex_command || '').trim();
            if (issue) {
              num = String(issue.number);
              labels = (issue.labels || []).map(l => l.name);
              const lower = labels.map(l => String(l||'').toLowerCase());
              if (lower.includes('agent:codex') || lower.includes('agents:codex')) { needs = 'true'; reason = 'labeled-issue-event'; } else { reason = 'issue-without-label'; }
            } else if (manualIssue) {
              num = manualIssue;
              const lowered = simulated.map(s => s.toLowerCase());
              if (lowered.includes('agent:codex') || lowered.includes('agents:codex')) { needs = 'true'; reason = 'manual-dispatch-simulated-label'; } else { reason = 'manual-dispatch-missing-simulated-label'; }
            } else if (manualIssueRaw && !manualIssue) { reason = 'invalid-manual-issue'; }
            const lowerAll = labels.map(l => l.toLowerCase()).concat(simulated.map(s=>s.toLowerCase()));
            function has(tag){ return lowerAll.includes(tag); }
            core.setOutput('sim_force_branch_fail', has('codex-sim:primary-fail') ? 'true':'false');
            core.setOutput('sim_force_dual_fail', has('codex-sim:dual-fail') ? 'true':'false');
            core.setOutput('sim_manual_mode', has('codex-sim:manual') ? 'true':'false');
            core.setOutput('sim_suppressed', has('codex-sim:suppress') ? 'true':'false');
            if (allowFallbackOverride === 'true' || allowFallbackOverride === 'false') core.setOutput('allow_fallback_override', allowFallbackOverride); else core.setOutput('allow_fallback_override','');
            if (codexCommand) core.setOutput('codex_command', codexCommand); else core.setOutput('codex_command','');
            core.setOutput('needs_codex_bootstrap', needs);
            core.setOutput('codex_issue', num);
            core.setOutput('detection_reason', reason);
            core.info(`needs_codex_bootstrap=${needs} issue=${num} reason=${reason}`);
      - name: Detection summary
        if: always()
        uses: actions/github-script@v7
        env:
          BRANCH: ${{ steps.mk.outputs.branch }}
        with:
          script: |
            const {owner, repo} = context.repo;
            const issue_number = context.payload.issue.number;
            const base = "${{ steps.def.outputs.default }}";
            const head = process.env.BRANCH;
            const existing = await github.rest.pulls.list({ owner, repo, state: 'open', head: `${owner}:${head}` });
            let pr = existing.data[0];
            if (!pr) {
              ({ data: pr } = await github.rest.pulls.create({
                owner, repo, head, base, draft: true,
                title: `Codex bootstrap for #${issue_number}`,
                body: `Refs #${issue_number}\n\nDraft PR created to engage Codex on this task.`
              }));
            }
            core.setOutput('number', String(pr.number));

      - name: Label PR with agent:codex (fallback)
        if: ${{ steps.local_action.outcome == 'failure' }}
        uses: actions/github-script@v7
        env:
          PR: ${{ steps.pr.outputs.number }}
        with:
          issue: ${{ needs.detect.outputs.codex_issue }}
          service_bot_pat: ${{ secrets.SERVICE_BOT_PAT || '' }}
          allow_fallback: ${{ needs.detect.outputs.allow_fallback_override != '' && needs.detect.outputs.allow_fallback_override || vars.CODEX_ALLOW_FALLBACK || 'true' }}
          codex_command: "${{ needs.detect.outputs.codex_command != '' && needs.detect.outputs.codex_command || '@codex start' }}"
          pr_mode: "${{ needs.detect.outputs.sim_manual_mode == 'true' && 'manual' || 'auto' }}"
          suppress_activate: "${{ needs.detect.outputs.sim_suppressed }}"
          force_branch_fail: "${{ needs.detect.outputs.sim_force_branch_fail }}"
          force_dual_fail: "${{ needs.detect.outputs.sim_force_dual_fail }}"
          fail_on_invalid_command: true
          net_retry_attempts: 2
          net_retry_delay_s: 3
      - name: Upload bootstrap artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          github-token: ${{ secrets.SERVICE_BOT_PAT }}
          script: |
            const {owner, repo} = context.repo;
            const prNumber = Number("${{ steps.pr.outputs.number }}");
            const cmd = 'codex: start';
            await github.rest.issues.createComment({ owner, repo, issue_number: prNumber, body: `${cmd}` });

      - name: Post Codex command as github-actions (fallback)
        if: ${{ steps.local_action.outcome == 'failure' && secrets.SERVICE_BOT_PAT == '' }}
        uses: actions/github-script@v7
        with:
          script: |
            const {owner, repo} = context.repo;
            const prNumber = Number("${{ steps.pr.outputs.number }}");
            const cmd = 'codex: start';
            await github.rest.issues.createComment({ owner, repo, issue_number: prNumber, body: `${cmd}` });

      - name: Link PR back to source issue (fallback)
        if: ${{ steps.local_action.outcome == 'failure' }}
        uses: actions/github-script@v7
        with:
          script: |
            const {owner, repo} = context.repo;
            await github.rest.issues.createComment({ owner, repo, issue_number: context.payload.issue.number, body: `Opened draft PR #${{ steps.pr.outputs.number }} to engage Codex. Track work there.` });