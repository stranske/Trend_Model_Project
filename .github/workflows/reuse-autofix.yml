name: Reusable Autofix

on:
  workflow_call:
    inputs:
      opt_in_label:
        description: 'Label to opt-in when PR is draft'
        required: false
        default: 'autofix'
        type: string
      commit_prefix:
        description: 'Commit message prefix'
        required: false
        default: 'ci: autofix'
        type: string

permissions:
  contents: write
  pull-requests: write

concurrency:
  group: autofix-${{ github.event.pull_request.number || github.run_id }}
  cancel-in-progress: false

jobs:
  autofix:
    runs-on: ubuntu-latest
    if: >-
      ${{ github.event_name == 'pull_request' &&
          github.actor != 'github-actions' &&
          github.actor != 'github-actions[bot]' &&
          !startsWith(github.event.pull_request.title, inputs.commit_prefix) &&
          ( !github.event.pull_request.draft || contains(github.event.pull_request.labels.*.name, inputs.opt_in_label) ) }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          fetch-depth: 0
          persist-credentials: true
      - name: Detect same-repo PR
        id: same_repo
        uses: actions/github-script@v7
        with:
          script: |
            const pr = context.payload.pull_request;
            const same = pr.head.repo.full_name === `${context.repo.owner}/${context.repo.repo}`;
            core.setOutput('same', String(same));
      - name: Autofix
        id: autofix
        uses: ./.github/actions/autofix
      - name: Commit changes (same-repo)
        if: steps.autofix.outputs.changed == 'true' && steps.same_repo.outputs.same == 'true'
        shell: bash
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add -A
          git commit -m "${{ inputs.commit_prefix }} formatting/lint"
      - name: Push changes (same-repo with rebase+retry)
        if: steps.autofix.outputs.changed == 'true' && steps.same_repo.outputs.same == 'true'
        shell: bash
        run: |
          set -euo pipefail
          branch="${{ github.event.pull_request.head.ref }}"
          for attempt in 1 2 3; do
            echo "[autofix] Push attempt $attempt"
            if git push origin HEAD:"$branch"; then
              echo "[autofix] Push succeeded"
              exit 0
            fi
            echo "[autofix] Push failed - attempting rebase (attempt $attempt)"
            git fetch origin "$branch" --prune
            git rebase --autostash --strategy-option theirs origin/"$branch" || {
              echo "[autofix] Rebase conflict; aborting rebase"; git rebase --abort || true; }
          done
          echo "[autofix] Failed to push after 3 attempts" >&2
          exit 1
      - name: Comment remaining issues
        if: steps.same_repo.outputs.same == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const pr = context.payload.pull_request;
            const remaining = core.getInput('remaining') || '${{ steps.autofix.outputs.remaining_issues }}';
            const changed = '${{ steps.autofix.outputs.changed }}';
            const body = [
              `Autofix run complete.`,
              `* Changed files: ${changed}`,
              `* Remaining ruff issues: ${remaining}`,
              (remaining !== '0'
                ? '\nYou can address the remaining issues manually or leave them for a future autofix pass.'
                : '\nNo remaining ruff issues.')
            ].join('\n');
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pr.number,
              body
            });
      - name: Create patch artifact (fork PR)
        if: steps.autofix.outputs.changed == 'true' && steps.same_repo.outputs.same != 'true'
        shell: bash
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add -A
          git commit -m "${{ inputs.commit_prefix }} formatting/lint (patch)" || true
          git format-patch -1 --stdout > autofix.patch
      - name: Upload patch artifact
        if: steps.autofix.outputs.changed == 'true' && steps.same_repo.outputs.same != 'true'
        uses: actions/upload-artifact@v4
        with:
          name: autofix-patch-pr-${{ github.event.pull_request.number }}
          path: autofix.patch
      - name: Comment with patch instructions
        if: steps.autofix.outputs.changed == 'true' && steps.same_repo.outputs.same != 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const pr = context.payload.pull_request;
            const body = [
              `I generated an autofix patch for this fork PR.`,
              ``,
              `How to apply locally:`,
              '1. Download the artifact "autofix-patch-pr-' + pr.number + '" from the Actions run.',
              '2. In your repo root, run:',
              '   git am < autofix.patch',
              '3. Push the changes to your PR branch:',
              '   git push origin HEAD:' + pr.head.ref,
            ].join('\n');
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pr.number,
              body
            });
      - name: Summary
        if: always()
        run: |
          echo "### Reusable Autofix Summary" >> $GITHUB_STEP_SUMMARY
          echo "Applied changes: ${{ steps.autofix.outputs.changed }}" >> $GITHUB_STEP_SUMMARY
          echo "Same repo: ${{ steps.same_repo.outputs.same }}" >> $GITHUB_STEP_SUMMARY
          if [ "${{ steps.autofix.outputs.changed }}" = "true" ] && [ "${{ steps.same_repo.outputs.same }}" != "true" ]; then
            echo "Patch artifact: autofix-patch-pr-${{ github.event.pull_request.number }}" >> $GITHUB_STEP_SUMMARY
          fi
