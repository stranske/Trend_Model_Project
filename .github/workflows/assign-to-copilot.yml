name: Assign issue to Copilot

on:
  issues:
    types: [opened, labeled, reopened]
  workflow_dispatch:    # backfill button in Actions

permissions:
  issues: write

concurrency:
  group: assign-${{ github.event.issue.number || 'manual' }}
  cancel-in-progress: false

jobs:
  assign_or_backfill:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;

            // Helper: does this label set include agent:copilot?
            function hasAgentCopilot(labels) {
              return (labels || []).map(l => (l.name || '').toLowerCase()).includes('agent:copilot');
            }

            // --- Manual backfill path (workflow_dispatch) ---
            if (context.eventName === 'workflow_dispatch') {
              // Find open issues with agent:copilot label but not assigned to copilot
              const q = `repo:${owner}/${repo} is:issue is:open label:"agent:copilot" -assignee:copilot`;
              const { data } = await github.rest.search.issuesAndPullRequests({ q, per_page: 100 });
              for (const it of data.items) {
                await github.rest.issues.addAssignees({ owner, repo, issue_number: it.number, assignees: ['copilot'] });
                await github.rest.issues.createComment({
                  owner, repo, issue_number: it.number,
                  body: 'Assigning to @copilot. Please pick up this issue.'
                });
              }
              core.info(`Backfilled ${data.items.length} issues to @copilot`);
              return;
            }

            // --- Issue event path ---
            const issue = context.payload.issue;
            const eventLabel = ((context.payload.label && context.payload.label.name) || '').toLowerCase();
            const labelPresent = hasAgentCopilot(issue.labels) || eventLabel === 'agent:copilot';

            if (!labelPresent) {
              core.info('agent:copilot not present on this issue; nothing to do.');
              return;
            }

            const currentAssignees = (issue.assignees || []).map(a => a.login);
            if (!currentAssignees.includes('copilot')) {
              await github.rest.issues.addAssignees({ owner, repo, issue_number: issue.number, assignees: ['copilot'] });
              await github.rest.issues.createComment({
                owner, repo, issue_number: issue.number,
                body: 'Assigning to @copilot. Please pick up this issue.'
              });
              core.info('Assigned copilot and commented.');
            } else {
              core.info('Copilot already assigned; nothing to do.');
            }
