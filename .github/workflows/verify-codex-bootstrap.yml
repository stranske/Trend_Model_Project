name: Verify Codex Bootstrap

on:
  workflow_dispatch:
    inputs:
      issue:
        description: "Issue number to verify"
        required: true
      expect_pr:
        description: "Set true if a PR should exist"
        required: false
        default: "true"

permissions:
  contents: read
  pull-requests: read
  issues: read

jobs:
  verify:
    runs-on: ubuntu-latest
    steps:
      - name: Inspect bootstrap artifacts
        uses: actions/github-script@v7
        with:
          script: |
            const issue = Number(core.getInput('issue'));
            const expectPR = /true/i.test(core.getInput('expect_pr'));
            const { owner, repo } = context.repo;
            const branch = `agents/codex-issue-${issue}`;
            // Probe branch existence
            let branchExists = true;
            try { 
              await github.rest.git.getRef({ owner, repo, ref: `heads/${branch}` }); 
            } catch (error) { 
              if (error.status === 404) { 
                branchExists = false; 
              } else { 
                core.error(`Error checking branch existence: ${error.message || error}`); 
                throw error; 
              } 
            }
            if (!branchExists) {
              core.setFailed(`Branch ${branch} does not exist.`);
              return;
            }
            // List open PRs on branch
            const { data: prs } = await github.rest.pulls.list({ owner, repo, state: 'open', head: `${owner}:${branch}` });
            const pr = prs[0];
            if (expectPR && !pr) {
              core.setFailed(`Expected a PR for branch ${branch} but none found.`);
            } else if (!expectPR && pr) {
              core.warning(`PR exists (#${pr.number}) but expect_pr=false.`);
            }
            // Fetch marker file if present
            const marker = `agents/.codex-bootstrap-${issue}.json`;
            let markerContent = null;
            try {
              const { data: markerFile } = await github.rest.repos.getContent({ owner, repo, path: marker, ref: branch });
              if (!Array.isArray(markerFile)) {
                markerContent = Buffer.from(markerFile.content, markerFile.encoding || 'base64').toString('utf8');
              }
            } catch (err) {
              if (err && err.status === 404) {
                // Marker file not found; this is expected in some cases.
              } else {
                core.warning(`Error fetching marker file: ${err?.message || err}`);
              }
            }
            core.summary
              .addHeading('Codex Bootstrap Verification')
              .addTable([[{data:'Issue',header:true},{data:'Branch',header:true},{data:'Branch Exists',header:true},{data:'PR',header:true},{data:'Marker',header:true}],
                [String(issue), branch, String(branchExists), pr ? `#${pr.number}` : '(none)', markerContent ? 'present' : 'absent']])
              .write();
            console.log(JSON.stringify({ issue, branch, branchExists, pr: pr ? pr.number : null, marker: !!markerContent }, null, 2));
