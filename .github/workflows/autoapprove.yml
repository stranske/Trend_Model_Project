name: auto-approve agent PRs
on:
  pull_request_target:
    types: [opened, labeled, synchronize, ready_for_review]
permissions:
  pull-requests: write
jobs:
  approve:
    if: >
      github.event.pull_request.draft == false &&
      (
        contains(github.event.pull_request.labels.*.name, (vars.AGENT_FROM_LABEL || 'from:copilot')) ||
        contains(github.event.pull_request.labels.*.name, (vars.AGENT_FROM_LABEL_ALT || 'from:codex'))
      ) &&
      contains(github.event.pull_request.labels.*.name, (vars.AUTOMERGE_LABEL || 'automerge')) &&
      contains(github.event.pull_request.labels.*.name, (vars.RISK_LABEL || 'risk:low'))
    runs-on: ubuntu-latest
    steps:
      - name: Checkout trusted config
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.base.ref }}
          persist-credentials: false
          sparse-checkout: |
            .github/autoapprove-allowlist.json
          sparse-checkout-cone: false
          path: trusted-config
      - name: Check PR file patterns and size
        id: pr-check
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            function loadAllowlist(filePath) {
              if (!filePath) {
                return {};
              }
              try {
                const data = fs.readFileSync(filePath, 'utf8');
                return JSON.parse(data);
              } catch (error) {
                core.warning(`Failed to read allowlist from ${filePath}: ${error.message}`);
                return {};
              }
            }
            const allowlistPath = process.env.ALLOWLIST_PATH || 'trusted-config/.github/autoapprove-allowlist.json';
            const allowlist = loadAllowlist(allowlistPath);
            const { owner, repo } = context.repo;
            if (!context.payload || !context.payload.pull_request) {
              core.warning('No pull_request in event payload; refusing to auto-approve.');
              return false;
            }
            const pull_number = context.payload.pull_request.number;
            // Get list of files changed in the PR
            // Octokit v17+ uses github.rest.pulls.listFiles; older versions use github.pulls.listFiles.
            // Prefer github.rest.pulls.listFiles, fallback to github.pulls.listFiles for compatibility.
            const listFiles = github?.rest?.pulls?.listFiles
              ? github.rest.pulls.listFiles
              : github?.pulls?.listFiles;
            if (!listFiles) {
              core.warning('Octokit pulls.listFiles API is unavailable on this runner.');
              return false;
            }
            const files = await github.paginate(listFiles, { owner, repo, pull_number });
            // Allow files by simple glob-like patterns
            const fallbackPatterns = Array.isArray(allowlist.patterns)
              ? allowlist.patterns.filter(p => typeof p === 'string')
              : [];
            const patterns = (process.env.APPROVE_PATTERNS || '')
              .split(',')
              .map(s => s.trim())
              .filter(Boolean);
            const effectivePatterns = patterns.length ? patterns : fallbackPatterns;
            if (!effectivePatterns.length) {
              core.warning('No allowlist patterns configured; refusing to auto-approve.');
              return false;
            }
            function match(filename) {
              return effectivePatterns.some(p => {
                if (p.endsWith('/**')) return filename.startsWith(p.slice(0, -3));
                if (p.startsWith('**/*.')) return filename.endsWith(p.slice(4));
                return filename === p;
              });
            }
            const allowed = files.every(f => match(f.filename));
            // Limit total lines changed
            const cap = Number(process.env.MAX_LINES_CHANGED || allowlist.max_lines_changed || '1000');
            const totalChanges = files.reduce((sum, f) => sum + f.changes, 0);
            const sizeOk = totalChanges <= cap;
            // Set output
            return allowed && sizeOk;
        env:
          ALLOWLIST_PATH: trusted-config/.github/autoapprove-allowlist.json
          APPROVE_PATTERNS: ${{ vars.APPROVE_PATTERNS }}
          MAX_LINES_CHANGED: ${{ vars.MAX_LINES_CHANGED }}
      - name: Auto-approve PR
        if: steps.pr-check.outputs.result == 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { owner, repo } = context.repo;
            if (!context.payload || !context.payload.pull_request) {
              core.warning('No pull_request in event payload; skip approval.');
              return;
            }
            const pull_number = context.payload.pull_request.number;
            const createReview = github?.rest?.pulls?.createReview || github?.pulls?.createReview;
            if (!createReview) {
              core.warning('Octokit pulls.createReview API is unavailable on this runner.');
              return;
            }
            await createReview({
              owner,
              repo,
              pull_number,
              event: 'APPROVE',
              body: 'Auto-approving agent PR'
            });
