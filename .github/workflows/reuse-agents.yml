name: Reusable Agents Pipeline

on:
  workflow_call:
    inputs:
      enable_readiness:
        description: 'Run agent readiness (assignability) probe (true/false)'
        required: false
        default: 'false'
        type: string
      readiness_agents:
        description: 'Comma-separated agent keys (copilot,codex)'
        required: false
        default: 'copilot,codex'
        type: string
      enable_preflight:
        description: 'Run codex preflight probe (true/false)'
        required: false
        default: 'false'
        type: string
      codex_user:
        description: 'Codex connector login override'
        required: false
        default: ''
        type: string
      codex_command_phrase:
        description: 'Command phrase to post for Codex'
        required: false
        default: ''
        type: string
      enable_diagnostic:
        description: 'Run bootstrap diagnostic job (true/false)'
        required: false
        default: 'false'
        type: string
      diagnostic_attempt_branch:
        description: 'Attempt branch create in diagnostic (true/false)'
        required: false
        default: 'false'
        type: string
      diagnostic_dry_run:
        description: 'Diagnostic dry run (true/false)'
        required: false
        default: 'true'
        type: string
      enable_verify_issue:
        description: 'Verify a specific issue has an agent assignee (true/false)'
        required: false
        default: 'false'
        type: string
      verify_issue_number:
        description: 'Issue number to verify when enable_verify_issue=true'
        required: false
        default: ''
        type: string
      enable_watchdog:
        description: 'Run watchdog checks (true/false)'
        required: false
        default: 'true'
        type: string
      bootstrap_issues_label:
        description: 'Label to trigger Codex bootstrap'
        required: false
        default: 'agent:codex'
        type: string
      draft_pr:
        description: 'Open bootstrap PRs as draft (true/false)'
        required: false
        default: 'false'
        type: string
    secrets:
      service_bot_pat:
        required: false

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  readiness:
    if: inputs.enable_readiness == 'true'
    name: Agent Readiness Probe
    runs-on: ubuntu-latest
    permissions:
      contents: read
      issues: write
    steps:
      - name: Probe assignable actors
        id: gql
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const q = `query($owner:String!, $repo:String!) { repository(owner:$owner, name:$repo) { suggestedActors(capabilities:[CAN_BE_ASSIGNED], first:100) { nodes { login } } } }`;
            const res = await github.graphql(q, { owner, repo });
            const actors = (res.repository?.suggestedActors?.nodes || []).map(n => (n.login || '').toLowerCase());
            core.setOutput('actors', JSON.stringify(actors));
      - name: Create temp issue
        id: tmp
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const { data: issue } = await github.rest.issues.create({ owner, repo, title: '[readiness] probe', body: 'temp' });
            core.setOutput('num', String(issue.number));
      - name: Try agent assignment
        id: try
        env:
          ACTORS_JSON: ${{ steps.gql.outputs.actors }}
          AGENTS_REQ: ${{ inputs.readiness_agents }}
        uses: actions/github-script@v7
        with:
          script: |
            const num = Number(core.getInput('issue_number') || process.env.ISSUE_NUM || '${{ steps.tmp.outputs.num }}');
            const actors = JSON.parse(process.env.ACTORS_JSON || '[]');
            const requested = (process.env.AGENTS_REQ || 'copilot,codex').split(',').map(s=>s.trim()).filter(Boolean);
            const CANDIDATES = {
              copilot: ['copilot','copilot-swe-agent'],
              codex: ['chatgpt-codex-connector']
            };
            const report = {};
            for (const key of requested) {
              const cands = CANDIDATES[key]||[];
              let ok=false, used=null;
              for (const c of cands) { if (actors.includes(c)) { ok=true; used=c; break; } }
              report[key]={ok, used};
            }
            core.setOutput('report', JSON.stringify(report));
      - name: Close temp
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo; await github.rest.issues.update({ owner, repo, issue_number: Number('${{ steps.tmp.outputs.num }}'), state: 'closed' });
      - name: Summary
        if: always()
        run: |
          echo "Readiness report: ${{ steps.try.outputs.report }}"

  preflight:
    if: inputs.enable_preflight == 'true'
    name: Codex Preflight
    runs-on: ubuntu-latest
    steps:
      - name: Preflight probe
        uses: actions/github-script@v7
        env:
          CODEX_USER: ${{ inputs.codex_user }}
          CODEX_COMMAND: ${{ inputs.codex_command_phrase }}
        with:
          script: |
            const { owner, repo } = context.repo;
            const user = process.env.CODEX_USER;
            if (!user) { core.warning('No CODEX_USER provided'); return; }
            const { data: issue } = await github.rest.issues.create({ owner, repo, title: '[probe] codex-assignability', body: 'temp' });
            try { await github.rest.issues.addAssignees({ owner, repo, issue_number: issue.number, assignees: [user] }); core.info('Assignable'); }
            catch (e) { core.warning('Not assignable: '+e.message); }
            if (process.env.CODEX_COMMAND) { await github.rest.issues.createComment({ owner, repo, issue_number: issue.number, body: process.env.CODEX_COMMAND }); }
            await github.rest.issues.update({ owner, repo, issue_number: issue.number, state: 'closed' });

  diagnostic:
    if: inputs.enable_diagnostic == 'true'
    name: Bootstrap Diagnostic
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Token / Env Probe
        shell: bash
        env:
          DRY_RUN: ${{ inputs.diagnostic_dry_run }}
          ATTEMPT: ${{ inputs.diagnostic_attempt_branch }}
        run: |
          set -euo pipefail
          echo "Diagnostic dry_run=$DRY_RUN attempt_branch=$ATTEMPT"
          echo "Tokens present: GITHUB_TOKEN=${GITHUB_TOKEN:+yes} SERVICE_BOT_PAT=${SERVICE_BOT_PAT:+yes}"
      - name: Attempt branch create
        if: inputs.diagnostic_attempt_branch == 'true'
        shell: bash
        run: |
          set -euo pipefail
          base=$(git rev-parse HEAD)
            ts=$(date -u +%Y%m%d%H%M%S)
            target="diagnostic/codex-${ts}"
            echo "Creating $target from $base"
            curl -s -o /tmp/create.json -w '%{http_code}' -X POST \
              -H "Authorization: Bearer ${GITHUB_TOKEN}" \
              -H 'Accept: application/vnd.github+json' \
              https://api.github.com/repos/${{ github.repository }}/git/refs \
              -d '{"ref":"refs/heads/'"$target"'","sha":"'"$base"'"}' || true

  verify_issue:
    if: inputs.enable_verify_issue == 'true' && inputs.verify_issue_number != ''
    name: Verify Agent Issue Assignment
    runs-on: ubuntu-latest
    steps:
      - name: Check assignees
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const issue_num = Number('${{ inputs.verify_issue_number }}');
            const { data: issue } = await github.rest.issues.get({ owner, repo, issue_number: issue_num });
            const assignees = (issue.assignees||[]).map(a => (a.login||'').toLowerCase());
            if (!assignees.includes('copilot') && !assignees.includes('chatgpt-codex-connector')) {
              core.setFailed(`Issue #${issue_num} has no agent assignee`);
            } else { core.info('Agent assigned: '+assignees.join(',')); }

  bootstrap-codex:
    name: Bootstrap Codex PRs
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Find Ready Issues
        id: ready
        uses: actions/github-script@v7
        env:
          LABEL: ${{ inputs.bootstrap_issues_label }}
        with:
          script: |
            const label = process.env.LABEL;
            const { data: issues } = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: label,
              per_page: 30
            });
            const ready = issues.filter(i => !i.pull_request && !i.title.toLowerCase().includes('wip'));
            core.setOutput('issue_numbers', ready.map(r => r.number).join(','));
      - name: Bootstrap First Issue (if any)
        if: steps.ready.outputs.issue_numbers != ''
        uses: ./.github/actions/codex-bootstrap-lite
        with:
            issue: ${{ fromJSON('[' + steps.ready.outputs.issue_numbers + ']')[0] }}
            service_bot_pat: ${{ secrets.service_bot_pat || '' }}
            draft: ${{ inputs.draft_pr }}

  watchdog:
    if: inputs.enable_watchdog == 'true'
    name: Agent Watchdog
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Basic Repo Sanity
        run: |
          test -f pyproject.toml || { echo 'pyproject.toml missing'; exit 1; }
          echo 'Repository baseline OK.'
