name: autofix on failures

on:
  workflow_run:
    # Only monitor workflows that actually exist by current name
    workflows: ["CI", "Docker", "actionlint"]
    types: [completed]

permissions:
  contents: write
  pull-requests: write
  checks: read
  actions: read

concurrency:
  group: autofix-on-failure-${{ github.event.workflow_run.id }}
  cancel-in-progress: true

jobs:
  handle-failure:
    # Fail-fast: only act on failed runs AND if an open PR exists AND PR has opt-in label (default 'autofix')
    if: >-
      ${{ github.event.workflow_run.conclusion != 'success' }}
    runs-on: ubuntu-latest

    steps:
      - name: Find open PR for this run's branch
        id: find_pr
        uses: actions/github-script@v7
        with:
          script: |
            const run = context.payload.workflow_run;
            const owner = context.repo.owner;
            const repo  = context.repo.repo;
            const headRef = `${owner}:${run.head_branch}`;
            const prs = await github.rest.pulls.list({ owner, repo, state: 'open', head: headRef });
            if (!prs.data.length) { core.setOutput('pr', ''); return; }
            const pr = prs.data[0];
            const sameRepo = pr.head.repo.full_name === `${owner}/${repo}`;
            const by = (pr.user?.login || '').toLowerCase();
            const labels = pr.labels.map(l => l.name);
            const isAgentPR = by.includes('copilot') || by.includes('codex') ||
                              labels.includes('from:copilot') || labels.includes('from:codex');
            const optInLabel = process.env.AUTOFIX_FAILURE_LABEL || 'autofix';
            const hasOptIn = labels.includes(optInLabel);
            core.setOutput('opt_in', String(hasOptIn));
            core.setOutput('pr',        String(pr.number));
            core.setOutput('head_ref',  pr.head.ref);
            core.setOutput('same_repo', String(sameRepo));
            core.setOutput('is_agent',  String(isAgentPR));

      - name: Stop if no PR found
        if: steps.find_pr.outputs.pr == ''
        run: echo "No open PR for this failing run. Nothing to do."

      - name: Stop if PR missing opt-in label
        if: steps.find_pr.outputs.pr != '' && steps.find_pr.outputs.opt_in != 'true'
        run: echo "PR missing opt-in label (autofix). Skipping remediation."

      - name: Checkout PR branch
        if: steps.find_pr.outputs.pr != '' && steps.find_pr.outputs.opt_in == 'true' && steps.find_pr.outputs.same_repo == 'true'
        uses: actions/checkout@v4
        with:
          ref: ${{ steps.find_pr.outputs.head_ref }}
          fetch-depth: 0
          persist-credentials: true
      - name: Detect prior autofix commit (idempotence guard)
        if: steps.find_pr.outputs.pr != '' && steps.find_pr.outputs.opt_in == 'true' && steps.find_pr.outputs.same_repo == 'true'
        id: guard
        run: |
          last_msg=$(git log -1 --pretty=%B | tr -d '\r')
          echo "Last commit: $last_msg"
          if echo "$last_msg" | grep -qi 'ci: autofix'; then
            echo "already=true" >> $GITHUB_OUTPUT
          else
            echo "already=false" >> $GITHUB_OUTPUT
          fi
      - name: Skip second autofix attempt
        if: steps.guard.outputs.already == 'true'
        run: echo "Previous commit already an autofix; skipping repeat remediation." && exit 0

      - name: Setup Python
        if: steps.find_pr.outputs.pr != '' && steps.find_pr.outputs.opt_in == 'true' && steps.find_pr.outputs.same_repo == 'true'
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
      - name: Autofix
        id: fix
        if: steps.find_pr.outputs.pr != '' && steps.find_pr.outputs.opt_in == 'true' && steps.find_pr.outputs.same_repo == 'true' && steps.guard.outputs.already != 'true'
        uses: ./.github/actions/autofix

      - name: Commit and push autofixes
        if: steps.fix.outputs.changed == 'true' && steps.find_pr.outputs.same_repo == 'true' && steps.guard.outputs.already != 'true'
        run: |
          git config user.name  "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add -A
          git commit -m "ci: autofix after failed checks"
          git push origin HEAD:${{ steps.find_pr.outputs.head_ref }}
      - name: Label PR (applied autofix)
        if: steps.fix.outputs.changed == 'true' && steps.find_pr.outputs.same_repo == 'true' && steps.guard.outputs.already != 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = Number('${{ steps.find_pr.outputs.pr }}');
            const label = process.env.APPLIED_LABEL || 'autofix:applied';
            try {
              await github.rest.issues.addLabels({ owner: context.repo.owner, repo: context.repo.repo, issue_number: prNumber, labels: [label] });
            } catch (e) { core.warning('Could not add label: ' + e.message); }
        env:
          APPLIED_LABEL: ${{ vars.AUTOFIX_APPLIED_LABEL || 'autofix:applied' }}
      - name: Fork patch artifact
        if: steps.fix.outputs.changed == 'true' && steps.find_pr.outputs.same_repo != 'true' && steps.guard.outputs.already != 'true'
        run: |
          git config user.name  "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add -A || true
          git commit -m "ci: autofix after failed checks (patch)" || true
          git format-patch -1 --stdout > failure-autofix.patch
      - name: Upload fork patch
        if: steps.fix.outputs.changed == 'true' && steps.find_pr.outputs.same_repo != 'true' && steps.guard.outputs.already != 'true'
        uses: actions/upload-artifact@v4
        with:
          name: failure-autofix-pr-${{ steps.find_pr.outputs.pr }}
          path: failure-autofix.patch
      - name: Comment patch instructions (fork)
        if: steps.fix.outputs.changed == 'true' && steps.find_pr.outputs.same_repo != 'true' && steps.guard.outputs.already != 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = Number(process.env.PR_NUMBER || '${{ steps.find_pr.outputs.pr }}');
            const body = [
              'Autofix generated a patch for this fork PR (failed workflow remediation).',
              '',
              'Steps to apply:',
              '1. Download artifact "failure-autofix-pr-' + prNumber + '"',
              '2. git am < failure-autofix.patch',
              '3. git push origin HEAD:${{ steps.find_pr.outputs.head_ref }}'
            ].join('\n');
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
              body
            });
      - name: Label PR (patch provided)
        if: steps.fix.outputs.changed == 'true' && steps.find_pr.outputs.same_repo != 'true' && steps.guard.outputs.already != 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = Number('${{ steps.find_pr.outputs.pr }}');
            const label = process.env.APPLIED_LABEL || 'autofix:applied';
            try {
              await github.rest.issues.addLabels({ owner: context.repo.owner, repo: context.repo.repo, issue_number: prNumber, labels: [label] });
            } catch (e) { core.warning('Could not add label: ' + e.message); }
        env:
          APPLIED_LABEL: ${{ vars.AUTOFIX_APPLIED_LABEL || 'autofix:applied' }}
      - name: Summary
        if: always()
        run: |
          echo "### Autofix Failure Handler Summary" >> $GITHUB_STEP_SUMMARY
          echo "Target PR: ${{ steps.find_pr.outputs.pr }}" >> $GITHUB_STEP_SUMMARY
          echo "Same repo: ${{ steps.find_pr.outputs.same_repo }}" >> $GITHUB_STEP_SUMMARY
          echo "Agent PR: ${{ steps.find_pr.outputs.is_agent }}" >> $GITHUB_STEP_SUMMARY
          echo "Opt-in label present: ${{ steps.find_pr.outputs.opt_in }}" >> $GITHUB_STEP_SUMMARY
          echo "Applied changes: ${{ steps.fix.outputs.changed }}" >> $GITHUB_STEP_SUMMARY
      - name: Tag PR with needs-autofix label
        if: steps.find_pr.outputs.pr != '' && steps.find_pr.outputs.opt_in == 'true' && steps.fix.outputs.changed != 'true'
        uses: actions/github-script@v7
        with:
          script: |
            // Add a label to signal that failure remediation attempted but no changes applied.
            const issue_number = Number('${{ steps.find_pr.outputs.pr }}');
            const label = 'needs-autofix-review';
            try {
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number,
                labels: [label]
              });
            } catch (e) {
              core.warning('Could not add label: ' + e.message);
            }
