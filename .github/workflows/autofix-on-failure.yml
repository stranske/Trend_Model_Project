name: autofix on failures

on:
  workflow_run:
    workflows: ["CI", "Docker"]
    types: [completed]

permissions:
  contents: write
  pull-requests: write
  checks: read
  actions: read

concurrency:
  group: autofix-on-failure-${{ github.event.workflow_run.id }}
  cancel-in-progress: true

jobs:
  handle-failure:
    if: ${{ github.event.workflow_run.conclusion != 'success' }}
    runs-on: ubuntu-latest

    steps:
      - name: Find open PR for this run's branch
        id: find_pr
        uses: actions/github-script@v7
        with:
          script: |
            const run = context.payload.workflow_run;
            const owner = context.repo.owner;
            const repo  = context.repo.repo;
            const headRef = `${owner}:${run.head_branch}`;
            const prs = await github.rest.pulls.list({ owner, repo, state: 'open', head: headRef });
            if (!prs.data.length) { core.setOutput('pr', ''); return; }
            const pr = prs.data[0];
            const sameRepo = pr.head.repo.full_name === `${owner}/${repo}`;
            const by = (pr.user?.login || '').toLowerCase();
            const labels = pr.labels.map(l => l.name);
            const isAgentPR = by.includes('copilot') || by.includes('codex') ||
                              labels.includes('from:copilot') || labels.includes('from:codex');
            core.setOutput('pr',        String(pr.number));
            core.setOutput('head_ref',  pr.head.ref);
            core.setOutput('same_repo', String(sameRepo));
            core.setOutput('is_agent',  String(isAgentPR));

      - name: Stop if no PR found
        if: steps.find_pr.outputs.pr == ''
        run: echo "No open PR for this failing run. Nothing to do."

      - name: Checkout PR branch
        if: steps.find_pr.outputs.pr != '' && steps.find_pr.outputs.same_repo == 'true'
        uses: actions/checkout@v4
        with:
          ref: ${{ steps.find_pr.outputs.head_ref }}
          fetch-depth: 0
          persist-credentials: true

      - name: Setup Python
        if: steps.find_pr.outputs.pr != '' && steps.find_pr.outputs.same_repo == 'true'
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Run auto-fixers (ruff/black/isort/docformatter)
        id: fix
        if: steps.find_pr.outputs.pr != '' && steps.find_pr.outputs.same_repo == 'true'
        run: |
          python -m pip install -U pip
          pip install -e ".[dev]" black==23.9.1 ruff==0.3.0 isort==5.12.0 docformatter==1.7.4
          ruff check --fix .
          black .
          isort .
          docformatter -r -i src tests
          if ! git diff --quiet; then echo "changed=true" >> $GITHUB_OUTPUT; else echo "changed=false" >> $GITHUB_OUTPUT; fi

      - name: Commit and push autofixes
        if: steps.fix.outputs.changed == 'true'
        run: |
          git config user.name  "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add -A
          git commit -m "ci: autofix after failed checks"
          git push origin HEAD:${{ steps.find_pr.outputs.head_ref }}

      - name: Summarize failing jobs and ping @copilot
        if: steps.find_pr.outputs.pr != '' && steps.fix.outputs.changed != 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const run = context.payload.workflow_run;
            const owner = context.repo.owner;
            const repo  = context.repo.repo;
            const prNum = Number('${{ steps.find_pr.outputs.pr }}');
            // Fetch all jobs using pagination
            let allJobs = [];
            let page = 1;
            let fetched;
            do {
              fetched = await github.rest.actions.listJobsForWorkflowRun({
                owner,
                repo,
                run_id: run.id,
                per_page: 100,
                page
              });
              allJobs = allJobs.concat(fetched.data.jobs);
              page += 1;
            } while (fetched.data.jobs.length === 100);
            const failing = allJobs
              .filter(j => (j.conclusion || '') !== 'success')
              .map(j => `- **${j.name}** (${j.conclusion}) â†’ [logs](${j.html_url})`)
              .join('\n') || '- failed checks, see run logs.';
            const isAgent = '${{ steps.find_pr.outputs.is_agent }}' === 'true';
            const mention = isAgent ? '@copilot ' : '';
            const body = `${mention}please update this PR to fix failing checks from **${run.name}** #${run.run_number}:\n\n${failing}`;
            await github.rest.issues.createComment({ owner, repo, issue_number: prNum, body });
