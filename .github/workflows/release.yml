name: Release

on:
  push:
    tags:
      - 'v*'  # Trigger on version tags like v0.1.0, v1.2.3, etc.
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to release (e.g., v0.1.0)'
        required: true
        type: string
      dry_run:
        description: 'Test release to TestPyPI only'
        required: false
        default: false
        type: boolean

permissions:
  contents: write
  id-token: write  # Required for trusted publishing to PyPI

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch full history for changelog generation
          
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          
      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine
          
      - name: Extract version from tag
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            VERSION="${{ inputs.tag }}"
          else
            VERSION="${GITHUB_REF#refs/tags/}"
          fi
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "Version: ${VERSION}"
          
      - name: Update version in pyproject.toml
        run: |
          VERSION=${{ steps.version.outputs.version }}
          # Remove 'v' prefix if present
          VERSION=${VERSION#v}
          sed -i "s/version = \".*\"/version = \"${VERSION}\"/" pyproject.toml
          echo "Updated version to: ${VERSION}"
          cat pyproject.toml | grep version
          
      - name: Build package
        run: |
          python -m build
          
      - name: Check package
        run: |
          python -m twine check dist/*
          
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/
          retention-days: 7

  test-install:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/
          
      - name: Test wheel installation
        run: |
          pip install dist/*.whl
          python -c "import trend_analysis; print('✓ Package imported successfully')"
          
      - name: Test source distribution
        run: |
          pip uninstall -y trend-analysis
          pip install dist/*.tar.gz
          python -c "import trend_analysis; print('✓ Source distribution works')"

  test-pypi:
    if: ${{ inputs.dry_run == true }}
    needs: [build, test-install]
    runs-on: ubuntu-latest
    environment: 
      name: test-pypi
      url: https://test.pypi.org/project/trend-analysis/
      
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/
          
      - name: Publish to TestPyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
          password: ${{ secrets.TEST_PYPI_API_TOKEN }}
          print-hash: true

  release:
    if: ${{ inputs.dry_run != true }}
    needs: [build, test-install]
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/project/trend-analysis/
      
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Set up Python  
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/
          
      - name: Generate changelog
        id: changelog
        run: |
          # Install git-cliff for changelog generation
          curl -L https://github.com/orhun/git-cliff/releases/latest/download/git-cliff-x86_64-unknown-linux-gnu.tar.gz | tar -xz
          chmod +x git-cliff
          
          # Get previous tag for changelog range
          PREV_TAG=$(git tag --sort=-version:refname | grep -v "^${{ needs.build.outputs.version }}$" | head -n1 || echo "")
          
          if [[ -n "$PREV_TAG" ]]; then
            CHANGELOG=$(./git-cliff --tag ${{ needs.build.outputs.version }} ${PREV_TAG}..${{ needs.build.outputs.version }} --strip header)
          else
            CHANGELOG=$(./git-cliff --tag ${{ needs.build.outputs.version }} --strip header)
          fi
          
          # Save changelog to file for GitHub release
          echo "$CHANGELOG" > CHANGELOG.md
          
          # Output for next step (using proper multiline format)
          {
            echo "changelog<<EOF"
            echo "$CHANGELOG"
            echo "EOF"
          } >> $GITHUB_OUTPUT
          
      - name: Extract clean version
        id: extract_version
        run: |
          VERSION=${{ needs.build.outputs.version }}
          CLEAN_VERSION=${VERSION#v}
          echo "clean_version=${CLEAN_VERSION}" >> $GITHUB_OUTPUT
          
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.build.outputs.version }}
          release_name: Release ${{ needs.build.outputs.version }}
          body: |
            # Release ${{ needs.build.outputs.version }}
            
            ## Changes
            ${{ steps.changelog.outputs.changelog }}
            
            ## Installation
            
            ```bash
            pip install trend-analysis==${{ steps.extract_version.outputs.clean_version }}
            ```
            
            ## Verification
            
            ```python
            import trend_analysis
            print(trend_analysis.__version__)
            ```
          draft: false
          prerelease: ${{ contains(needs.build.outputs.version, 'alpha') || contains(needs.build.outputs.version, 'beta') || contains(needs.build.outputs.version, 'rc') }}
          
      - name: Upload Release Assets
        run: |
          # Upload each distribution file as a separate asset
          for file in dist/*; do
            filename=$(basename "$file")
            curl -X POST \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Content-Type: application/octet-stream" \
              --data-binary @"$file" \
              "${{ steps.create_release.outputs.upload_url }}?name=$filename"
          done
          
      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
          print-hash: true