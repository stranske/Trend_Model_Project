name: cleanup codex bootstrap branches

on:
  schedule:
    - cron: '17 3 * * *'
  workflow_dispatch:
    inputs:
      max_age_days:
        description: 'Max age (days) since last commit on bootstrap branch before pruning'
        required: false
        default: '14'

permissions:
  contents: write
  issues: write

jobs:
  prune:
    runs-on: ubuntu-latest
    steps:
      - name: List & prune stale branches
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.SERVICE_BOT_PAT || secrets.GITHUB_TOKEN }}
          script: |
            const { owner, repo } = context.repo;
            const maxAgeDays = Number(core.getInput('max_age_days') || '14');
            const cutoff = Date.now() - maxAgeDays*24*3600*1000;
            const branches = await github.paginate(github.rest.repos.listBranches, { owner, repo, per_page: 100 });
            const target = branches.filter(b => /^agents\/codex-issue-\d+$/.test(b.name));
            core.info(`Found ${target.length} codex bootstrap branches.`);
            const stale = [];
            for (const b of target) {
              try {
                const { data: commit } = await github.rest.repos.getCommit({ owner, repo, ref: b.name });
                const ts = new Date(commit.commit.author.date).getTime();
                if (ts < cutoff) stale.push({ name: b.name, ageDays: (Date.now()-ts)/86400000 });
              } catch (e) { core.warning(`Could not inspect branch ${b.name}: ${e.message}`); }
            }
            if (!stale.length) { core.info('No stale branches.'); return; }
            for (const s of stale) {
              try {
                await github.rest.git.deleteRef({ owner, repo, ref: `heads/${s.name}` });
                core.info(`Deleted stale branch ${s.name} (age ~${s.ageDays.toFixed(1)}d)`);
              } catch (e) {
                core.warning(`Failed to delete ${s.name}: ${e.message}`);
              }
            }
            core.summary
              .addHeading('Codex Bootstrap Prune Summary')
              .addTable([
                [{data:'Branch',header:true},{data:'Age (days)',header:true}],
                ...stale.map(s => [s.name, s.ageDays.toFixed(1)])
              ])
              .write();