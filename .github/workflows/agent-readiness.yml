name: agent readiness (copilot + codex)

on:
  workflow_dispatch:
    inputs:
      agents:
        description: "Comma-separated agent keys to test"
        default: "copilot,codex"
        required: false
      require_all:
        description: "Fail if any requested agent is not assignable (true/false)"
        default: "true"
        required: false
      copilot_logins:
        description: "Candidate GitHub logins for Copilot (comma-separated)"
        default: "copilot,copilot-swe-agent"
        required: false
      codex_logins:
        description: "Candidate GitHub logins for Codex (comma-separated)"
        default: "chatgpt-codex-connector"
        required: false

permissions:
  contents: read
  issues: write

jobs:
  probe:
    runs-on: ubuntu-latest
    steps:
      - name: Probe assignable actors via GraphQL
        id: gql
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const q = `
              query($owner:String!, $repo:String!) {
                repository(owner:$owner, name:$repo) {
                  suggestedActors(capabilities:[CAN_BE_ASSIGNED], first:100) {
                    nodes { login }
                  }
                }
              }`;
            const res = await github.graphql(q, { owner, repo });
            const actors = (res.repository?.suggestedActors?.nodes || [])
              .map(n => (n.login || '').toLowerCase());
            core.info("Assignable actors: " + JSON.stringify(actors));
            core.setOutput('actors', JSON.stringify(actors));

      - name: Create temporary issue
        id: tmp
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const { data: issue } = await github.rest.issues.create({
              owner, repo,
              title: "[readiness] agent assignability probe",
              body: "Temporary issue for readiness checks. Safe to close."
            });
            core.info(`Temp issue #${issue.number} created`);
            core.setOutput('num', String(issue.number));

      - name: Try assigning agents
        id: try
        env:
          ACTORS_JSON: ${{ steps.gql.outputs.actors }}
          INPUT_AGENTS: ${{ github.event.inputs.agents }}
          INPUT_REQUIRE_ALL: ${{ github.event.inputs.require_all }}
          INPUT_COPILOT_LOGINS: ${{ github.event.inputs.copilot_logins }}
          INPUT_CODEX_LOGINS: ${{ github.event.inputs.codex_logins }}
          ISSUE_NUM: ${{ steps.tmp.outputs.num }}
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const num = Number(process.env.ISSUE_NUM || '0');

            // Safe JSON parse of actors list from env
            let actors = [];
            try { actors = JSON.parse(process.env.ACTORS_JSON || '[]'); }
            catch (e) { core.warning("Could not parse ACTORS_JSON; using []"); actors = []; }

            // Inputs (from env to avoid expression quoting issues)
            const requireAll = String(process.env.INPUT_REQUIRE_ALL || 'true').toLowerCase() === 'true';
            const agentsRequested = (process.env.INPUT_AGENTS || 'copilot,codex')
              .split(',').map(s => s.trim().toLowerCase()).filter(Boolean);

            // Candidate login lists
            const CANDIDATES = {
              copilot: (process.env.INPUT_COPILOT_LOGINS || 'copilot,copilot-swe-agent')
                        .split(',').map(s => s.trim().toLowerCase()).filter(Boolean),
              codex:   (process.env.INPUT_CODEX_LOGINS   || 'chatgpt-codex-connector')
                        .split(',').map(s => s.trim().toLowerCase()).filter(Boolean),
            };

            async function tryAssign(oneLogin) {
              try {
                const res = await github.rest.issues.addAssignees({
                  owner, repo, issue_number: num, assignees: [oneLogin]
                });
                return { ok: res.status >= 200 && res.status < 300, status: res.status, login: oneLogin };
              } catch (err) {
                return { ok: false, status: err.status || 'ERR', login: oneLogin, message: err.message || String(err) };
              }
            }

            const report = {};
            for (const agentKey of agentsRequested) {
              const candidates = CANDIDATES[agentKey] || [];
              if (!candidates.length) {
                report[agentKey] = { ok: false, reason: 'no candidates configured' };
                continue;
              }

              core.info(`\n== Testing ${agentKey.toUpperCase()} ==`);
              core.info(`Candidates: ${JSON.stringify(candidates)}`);
              const inSuggested = candidates.some(c => actors.includes(c));
              core.info(`GraphQL suggestedActors contains any candidate? ${inSuggested}`);

              let outcome = { ok: false, status: 'NA', used: null, inSuggested };
              for (const cand of candidates) {
                const res = await tryAssign(cand);
                core.info(`addAssignees(${cand}) -> ${res.status} ok=${res.ok}`);
                if (res.ok) { outcome = { ok: true, status: res.status, used: cand, inSuggested }; break; }
                if (!outcome.message && res.message) outcome.message = res.message;
              }
              report[agentKey] = outcome;
            }

            core.info("Report: " + JSON.stringify(report, null, 2));
            core.setOutput('report', JSON.stringify(report));
            if (Object.values(report).some(v => v && typeof v === 'object' && v.ok === false) && requireAll) {
              core.setFailed("One or more requested agents are not assignable here. See report above.");
            }

      - name: Close temporary issue
        if: always()
        env:
          ISSUE_NUM: ${{ steps.tmp.outputs.num }}
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const num = Number(process.env.ISSUE_NUM || '0');
            if (num) {
              await github.rest.issues.update({ owner, repo, issue_number: num, state: 'closed' });
              core.info(`Temp issue #${num} closed`);
            }

      - name: Summary
        if: always()
        env:
          REPORT: ${{ steps.try.outputs.report }}
        run: |
          echo "=== Agent readiness report ==="
          echo "${REPORT}" | sed -e 's/^/  /'
