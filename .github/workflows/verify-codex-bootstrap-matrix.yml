name: Verify Codex Bootstrap Matrix

on:
  workflow_dispatch:
  schedule:
    - cron: '17 3 * * *'
  push:
    paths:
      - '.github/workflows/verify-codex-bootstrap-matrix.yml'
      - 'scripts/verify_codex_bootstrap.py'
      - 'docs/codex-simulation.md'
    inputs:
      scenarios:
        description: "Comma-separated list: all or subset. See scripts/verify_codex_bootstrap.py SCENARIOS_IMPL for available scenarios."
        required: false
        default: "all"
      parallel:
        description: "Run scenarios in matrix (true) or sequential harness (false)"
        required: false
        default: "false"
      force_branch_fail:
        description: "Simulate branch creation failure (only for t11_dual_fail)"
        required: false
        default: "false"
      override_allow_fallback:
        description: "Override allow_fallback (true|false|empty for default)"
        required: false
        default: ""
      codex_command:
        description: "Override codex command for t14_invalid_cmd"
        required: false
        default: "codex: start"
      pr_mode:
        description: "Override pr_mode (auto|manual) for t12_manual_mode"
        required: false
        default: "auto"
      suppress_activate:
        description: "Set to true for t13_suppressed"
        required: false
        default: "false"

jobs:
  plan:
    runs-on: ubuntu-latest
    outputs:
      scenario_list: ${{ steps.compute.outputs.scenario_list }}
    steps:
      - name: Compute scenario list
        id: compute
        run: |
          IN="${{ github.event.inputs.scenarios }}"
          if [ -z "$IN" ] || [ "$IN" = "all" ]; then
            LIST="t01_basic,t02_reuse,t03_rebootstrap,t04_missing_label,t05_manual_sim,t06_manual_no_sim,t07_invalid_manual,t08_pat_missing_fallback,t09_pat_missing_block,t10_primary_403_fallback,t11_dual_fail,t12_manual_mode,t13_suppressed,t14_invalid_cmd,t15_corrupt_marker"
          else
            LIST="$IN"
          fi
          echo "scenario_list=$LIST" >> $GITHUB_OUTPUT
          echo "Scenarios: $LIST"
  matrix:
    needs: plan
    if: ${{ github.event.inputs.parallel == 'true' }}
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
      pull-requests: write
    strategy:
      fail-fast: false
      matrix:
        scenario: ${{ fromJson(format('["{0}"]', replace(needs.plan.outputs.scenario_list, ',', '","'))) }}
    steps:
        - name: Checkout
          uses: actions/checkout@v4
        - name: Install jq
          run: sudo apt-get update && sudo apt-get install -y jq
        - name: Run single scenario
          env:
            SCENARIOS: ${{ matrix.scenario }}
            FORCE_BRANCH_FAIL: ${{ github.event.inputs.force_branch_fail }}
            OVERRIDE_ALLOW_FALLBACK: ${{ github.event.inputs.override_allow_fallback }}
            OVERRIDE_CODEX_COMMAND: ${{ github.event.inputs.codex_command }}
            OVERRIDE_PR_MODE: ${{ github.event.inputs.pr_mode }}
            SUPPRESS_ACTIVATE: ${{ github.event.inputs.suppress_activate != '' && github.event.inputs.suppress_activate || 'false' }}
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
            SERVICE_BOT_PAT: ${{ secrets.SERVICE_BOT_PAT }}
          run: |
            python scripts/verify_codex_bootstrap.py || echo "Scenario completed (status captured in artifact)."
        - name: Upload scenario artifact
          if: always()
          uses: actions/upload-artifact@v4
          with:
            name: codex-bootstrap-${{ matrix.scenario }}
            path: |
              codex-verification-report.json
              codex-verification-report.md
              codex-scenario-logs/
            if-no-files-found: warn
        - name: Scenario summary
          if: always()
          uses: actions/github-script@v7
          with:
            script: |
              const fs = require('fs');
              let table = [];
              if (fs.existsSync('codex-verification-report.json')) {
                const data = JSON.parse(fs.readFileSync('codex-verification-report.json','utf8'));
                table = data.map(r => [r.name, r.status, r.duration_s ?? '', (r.expectation && (r.expectation.expect_new_pr && 'new_pr' || r.expectation.expect_reuse && 'reuse' || r.expectation.expect_no_bootstrap && 'no_bootstrap' || r.expectation.expect_artifact && 'artifact' || ''))]);
              }
              core.summary.addHeading(`Scenario ${process.env.SCENARIOS || ''} Result`).addTable([[{data:'Scenario',header:true},{data:'Status',header:true},{data:'Duration(s)',header:true},{data:'Expectation',header:true}], ...table]).write();

  sequential:
    needs: plan
    if: ${{ github.event.inputs.parallel != 'true' }}
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
      pull-requests: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install gh (already present) & jq
        run: sudo apt-get update && sudo apt-get install -y jq
      - name: Run verification harness
        env:
          SCENARIOS: ${{ needs.plan.outputs.scenario_list }}
          FORCE_BRANCH_FAIL: ${{ github.event.inputs.force_branch_fail }}
          OVERRIDE_ALLOW_FALLBACK: ${{ github.event.inputs.override_allow_fallback }}
          OVERRIDE_CODEX_COMMAND: ${{ github.event.inputs.codex_command }}
          OVERRIDE_PR_MODE: ${{ github.event.inputs.pr_mode }}
          SUPPRESS_ACTIVATE: ${{ github.event.inputs.suppress_activate || 'false' }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SERVICE_BOT_PAT: ${{ secrets.SERVICE_BOT_PAT }}
        run: |
          python scripts/verify_codex_bootstrap.py
      - name: Upload verification report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: codex-bootstrap-verification
          path: |
            codex-verification-report.json
            codex-verification-report.md
            codex-scenario-logs/
          if-no-files-found: warn
      - name: Verification summary
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            if (!fs.existsSync('codex-verification-report.json')) { core.warning('No verification JSON found'); return; }
            const data = JSON.parse(fs.readFileSync('codex-verification-report.json','utf8'));
            const rows = data.map(r => [r.name, r.status, r.duration_s ?? '', (r.expectation && (r.expectation.expect_new_pr && 'new_pr' || r.expectation.expect_reuse && 'reuse' || r.expectation.expect_no_bootstrap && 'no_bootstrap' || r.expectation.expect_artifact && 'artifact' || ''))]);
            core.summary.addHeading('Codex Verification Summary').addTable([[{data:'Scenario',header:true},{data:'Status',header:true},{data:'Duration(s)',header:true},{data:'Expectation',header:true}], ...rows]).write();
