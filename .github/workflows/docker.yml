name: Docker

on:
  push:
    branches: [ phase-2-dev ]
    paths-ignore:
      - 'docs/**'
      - '**/*.md'
      - '.github/ISSUE_TEMPLATE/**'
  pull_request:
    paths-ignore:
      - 'docs/**'
      - '**/*.md'
      - '.github/ISSUE_TEMPLATE/**'
  workflow_dispatch:
    inputs:
      debug_build:
        description: 'Enable verbose test output for debugging'
        required: false
        default: false
        type: boolean

jobs:
  lint:
    name: Lint Dockerfile
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Run hadolint
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: Dockerfile

  build:
    needs: lint
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    env:
      REGISTRY: ${{ vars.REGISTRY || 'ghcr.io' }}
      IMAGE_NAME: ${{ vars.IMAGE_NAME || format('{0}/{1}', github.repository_owner, 'trend-model') }}
      HEALTH_PORT: ${{ vars.HEALTH_PORT || '8000' }}
      HEALTH_PATH: ${{ vars.HEALTH_PATH || '/health' }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.sha || github.sha }}
      - name: Log in to container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build image
        run: docker build --pull -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest .
      - name: Run test suite
        run: |
          # Use verbose output only for debug builds, quiet mode for production
          if [ "${{ github.event.inputs.debug_build }}" = "true" ]; then
            echo "Running tests with verbose output for debugging..."
            docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest pytest -v --tb=short
          else
            echo "Running tests with quiet output for production build..."
            docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest pytest -q
          fi
      - name: Smoke test health endpoint
        run: |
          echo "üîç Testing health endpoint with retry logic..."
          CONTAINER_ID=$(docker run -d -p ${{ env.HEALTH_PORT }}:${{ env.HEALTH_PORT }} ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest)
          echo "Started container: $CONTAINER_ID"
          
          # Wait for container startup with backoff
          max_attempts=10
          attempt=1
          while [ $attempt -le $max_attempts ]; do
            if curl -fs http://localhost:${{ env.HEALTH_PORT }}${{ env.HEALTH_PATH }} | grep -q "OK"; then
              echo "‚úÖ Health check passed on attempt $attempt"
              break
            else
              echo "Attempt $attempt failed, retrying..."
              sleep 1
            fi
            attempt=$((attempt+1))
          done
          
          # Cleanup
          docker stop "$CONTAINER_ID"
          docker rm "$CONTAINER_ID"
          
          if [ $attempt -gt $max_attempts ]; then
            echo "‚ùå Health check failed after $max_attempts attempts"
            exit 1
          fi
      - name: Push image
        if: github.event_name == 'push' && github.ref == 'refs/heads/phase-2-dev'
        run: docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
