name: Codex Issue Bridge (label → draft PR + human command)

on:
  issues:
    types: [opened, labeled, reopened]
  workflow_dispatch:
    inputs:
      test_issue:
        description: "Manually test with a specific issue number (optional)"
        required: false
        default: ""
      post_codex_comment:
        description: "Auto-post '@codex start' as the actor (true/false)"
        required: false
        default: "true"
      pr_mode:
        description: "create | invite (invite = human opens the PR)"
        required: false
        default: "create"

permissions:
  contents: write
  pull-requests: write
  issues: write

concurrency:
  group: codex-issue-${{ github.event.issue.number || inputs.test_issue || github.run_id }}
  cancel-in-progress: false

jobs:
  bridge:
    if: >
      github.event_name == 'workflow_dispatch' ||
      (github.event.action == 'labeled' &&
        (contains(github.event.label.name, 'agent:codex') || contains(github.event.label.name, 'agents:codex'))) ||
      (github.event.action != 'labeled' &&
        (
          contains(join(github.event.issue.labels.*.name, ' '), 'agent:codex') ||
          contains(join(github.event.issue.labels.*.name, ' '), 'agents:codex')
        ))
    runs-on: ubuntu-latest
    env:
      SERVICE_BOT_PAT: ${{ secrets.SERVICE_BOT_PAT }}

    steps:
      - name: Event summary
        uses: actions/github-script@v7
        with:
          script: |
            const act = context.payload.action;
            const label = (context.payload.label && context.payload.label.name) || '(none)';
            const issueNo = context.payload.issue && context.payload.issue.number;
            core.summary.addHeading('Codex Bridge – Event Summary').addTable([
              [{data:'Action',header:true},{data:'Label',header:true},{data:'Issue',header:true}],
              [String(act), label, String(issueNo)]
            ]).write();

      - name: Get default branch
        id: def
        uses: actions/github-script@v7
        with:
          script: |
            const {owner, repo} = context.repo;
            const {data} = await github.rest.repos.get({owner, repo});
            core.setOutput('default', data.default_branch || 'main');

      - name: Checkout default
        uses: actions/checkout@v4
        with:
          ref: ${{ steps.def.outputs.default }}
          fetch-depth: 0
          persist-credentials: true

      - name: Select PR mode (invite for issue events)
        id: mode
        uses: actions/github-script@v7
        with:
          script: |
            // Enforce invite mode on issue events so the human is the PR author; allow inputs on workflow_dispatch
            const ev = context.eventName;
            let mode = 'invite';
            let reason = 'issues-event-enforced';
            if (ev === 'workflow_dispatch') {
              const im = (context.payload.inputs && context.payload.inputs.pr_mode) || 'create';
              const m = String(im).toLowerCase();
              mode = (m === 'invite' || m === 'create') ? m : 'create';
              reason = 'workflow-dispatch';
            }
            core.setOutput('mode', mode);
            core.setOutput('reason', reason);

      - name: Log chosen mode
        run: |
          echo "Chosen PR mode: ${{ steps.mode.outputs.mode }} (reason: ${{ steps.mode.outputs.reason }})"

      - name: Try local composite Codex bootstrap (lite)
        id: local_action
        continue-on-error: true
        uses: ./.github/actions/codex-bootstrap-lite
        with:
          issue: ${{ github.event.issue.number || inputs.test_issue }}
          service_bot_pat: ${{ (steps.mode.outputs.mode == 'create' && secrets.OWNER_PR_PAT) || secrets.SERVICE_BOT_PAT }}
          allow_fallback: true
          codex_command: '@codex start'
          base_branch: ''
          draft: 'false'
          auto_ready: 'true'
          post_codex_comment: ${{ inputs.post_codex_comment || 'false' }}
          pr_mode: ${{ steps.mode.outputs.mode }}

      - name: Debug composite outputs
        if: ${{ steps.local_action.outcome == 'success' }}
        run: |
          echo "Composite outputs: pr=${{ steps.local_action.outputs.pr }} branch=${{ steps.local_action.outputs.branch }}"

      - name: Create branch and bootstrap file
        if: ${{ steps.local_action.outcome == 'failure' }}
        id: mk
        env:
          ISSUE: ${{ github.event.issue.number || inputs.test_issue }}
        run: |
          set -euo pipefail
          BR=agents/codex-issue-${ISSUE}-${GITHUB_RUN_ID}
          git config user.name  "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git checkout -b "$BR"
          mkdir -p agents
          printf "<!-- bootstrap for codex on issue #%s -->\n" "$ISSUE" > "agents/codex-${ISSUE}.md"
          git add "agents/codex-${ISSUE}.md"
          git commit -m "chore(codex): bootstrap PR for issue #${ISSUE}"
          git push origin "$BR"
          echo "branch=$BR" >> "$GITHUB_OUTPUT"

      - name: Invite human to open PR (fallback)
        if: ${{ steps.local_action.outcome == 'failure' && steps.mode.outputs.mode == 'invite' }}
        uses: actions/github-script@v7
        env:
          BRANCH: ${{ steps.mk.outputs.branch }}
        with:
          script: |
            const {owner, repo} = context.repo;
            const issue_number = (context.payload.issue && context.payload.issue.number) || Number(context.payload.inputs && context.payload.inputs.test_issue);
            const base = "${{ steps.def.outputs.default }}";
            const branch = process.env.BRANCH;
            // Replicate issue for suggested PR body
            let issueTitle = '';
            let issueBody = '';
            try { const { data: is } = await github.rest.issues.get({ owner, repo, issue_number }); issueTitle = is.title || ''; issueBody = is.body || ''; } catch {}
            const issueUrl = `https://github.com/${owner}/${repo}/issues/${issue_number}`;
            const header = `### Source Issue #${issue_number}: ${issueTitle}`;
            const quoted = (issueBody || '').split('\n').map(l => `> ${l}`).join('\n');
            const suggestion = `${header}\n\nSource: ${issueUrl}\n\n${quoted}\n\n—\n(After opening the PR, comment with \`@codex start\`.)`;
            const compareUrl = `https://github.com/${owner}/${repo}/compare/${base}...${branch}?expand=1`;
            await github.rest.issues.createComment({ owner, repo, issue_number, body: `Branch \`${branch}\` created from \`${base}\`.\n\nOption 1 (Invite) is enforced on issue events. PR creation is disabled by design so you are the PR author. Codex only engages on human-authored PRs.\n\nPlease open the PR as the author so Codex can work on it:\n\n- Compare link: ${compareUrl}\n- Suggested title: \`Codex bootstrap for #${issue_number}\`\n- Suggested body (copy/paste):\n\n\n${'```markdown'}\n${suggestion}\n${'```'}` });

      - name: Skip PR creation when inviting
        if: ${{ steps.local_action.outcome == 'failure' && steps.mode.outputs.mode == 'invite' }}
        run: |
          echo "Invite mode: skipping PR creation; waiting for human author."

      - name: Open or reuse PR
        if: ${{ steps.local_action.outcome == 'failure' && steps.mode.outputs.mode != 'invite' }}
        id: pr
        uses: actions/github-script@v7
        env:
          BRANCH: ${{ steps.mk.outputs.branch }}
        with:
          github-token: ${{ secrets.OWNER_PR_PAT || secrets.SERVICE_BOT_PAT || github.token }}
          script: |
            const {owner, repo} = context.repo;
            const issue_number = (context.payload.issue && context.payload.issue.number) || Number(context.payload.inputs && context.payload.inputs.test_issue);
            const base = "${{ steps.def.outputs.default }}";
            const head = process.env.BRANCH;

            const existing = await github.rest.pulls.list({ owner, repo, state: 'open', head: `${owner}:${head}` });
            let pr = existing.data[0];
            if (!pr) {
              // Pull original issue details to replicate contents in PR body
              let issueTitle = '';
              let issueBody = '';
              try {
                const { data: is } = await github.rest.issues.get({ owner, repo, issue_number });
                issueTitle = is.title || '';
                issueBody = is.body || '';
              } catch (e) {
                core.warning(`Failed to fetch issue #${issue_number}: ${e.message}`);
              }
              const issueUrl = `https://github.com/${owner}/${repo}/issues/${issue_number}`;
              const header = `### Source Issue #${issue_number}: ${issueTitle}`;
              const quoted = (issueBody || '').split('\n').map(l => `> ${l}`).join('\n');
              const prBody = `${header}\n\nSource: ${issueUrl}\n\n${quoted}\n\n—\nPR created automatically to engage Codex.`;
              ({ data: pr } = await github.rest.pulls.create({
                owner, repo, head, base, draft: false,
                title: `Codex bootstrap for #${issue_number}`,
                body: prBody
              }));
            }
            core.setOutput('number', String(pr.number));

            // Assign PR and original issue
            const assignees = ['chatgpt-codex-connector', 'stranske-automation-bot'];
            try { await github.rest.issues.addAssignees({ owner, repo, issue_number: pr.number, assignees }); } catch (e) { core.warning(`PR assign failed: ${e.message}`); }
            try { await github.rest.issues.addAssignees({ owner, repo, issue_number, assignees }); } catch (e) { core.warning(`Issue assign failed: ${e.message}`); }

      - name: Label PR (agent:codex)
        if: ${{ steps.local_action.outcome == 'failure' && steps.mode.outputs.mode != 'invite' }}
        uses: actions/github-script@v7
        env:
          PR: ${{ steps.pr.outputs.number }}
        with:
          script: |
            const {owner, repo} = context.repo;
            const prNumber = Number(process.env.PR);
            await github.rest.issues.addLabels({ owner, repo, issue_number: prNumber, labels: ['agent:codex'] });

      # Prefer posting as a human service user so Codex sees the command
      - name: Post Codex command as service user
        if: ${{ steps.local_action.outcome == 'failure' && steps.mode.outputs.mode != 'invite' && env.SERVICE_BOT_PAT != '' && (inputs.post_codex_comment == 'true') }}
        uses: actions/github-script@v7
        with:
          github-token: ${{ env.SERVICE_BOT_PAT }}
          script: |
            const {owner, repo} = context.repo;
            const prNumber = Number("${{ steps.pr.outputs.number }}");
            const cmd = '@codex start';
            await github.rest.issues.createComment({
              owner, repo, issue_number: prNumber,
              body: `${cmd}\n\nPlease create commits on this branch, run tests, and keep the PR updated.`
            });

      # Fallback: still post with GITHUB_TOKEN if no PAT (Codex may ignore it)
      - name: Post Codex command (fallback as github-actions)
        if: ${{ steps.local_action.outcome == 'failure' && steps.mode.outputs.mode != 'invite' && env.SERVICE_BOT_PAT == '' && (inputs.post_codex_comment == 'true') }}
        uses: actions/github-script@v7
        with:
          script: |
            const {owner, repo} = context.repo;
            const prNumber = Number("${{ steps.pr.outputs.number }}");
            const cmd = '@codex start';
            await github.rest.issues.createComment({
              owner, repo, issue_number: prNumber,
              body: `${cmd}\n\nPlease create commits on this branch, run tests, and keep the PR updated.`
            });

      - name: Prompt human to post Codex command
        if: ${{ steps.local_action.outcome == 'failure' && steps.mode.outputs.mode != 'invite' && (inputs.post_codex_comment != 'true') }}
        uses: actions/github-script@v7
        with:
          script: |
            const {owner, repo} = context.repo;
            const prNumber = Number("${{ steps.pr.outputs.number }}");
            await github.rest.issues.createComment({
              owner, repo, issue_number: prNumber,
              body: `PR created. To engage Codex, the PR author must comment:\n\n\`@codex start\``
            });

      - name: Link PR on original issue
        if: ${{ steps.local_action.outcome == 'failure' && steps.mode.outputs.mode != 'invite' }}
        uses: actions/github-script@v7
        with:
          script: |
            const {owner, repo} = context.repo;
            const issue_number = (context.payload.issue && context.payload.issue.number) || Number(context.payload.inputs && context.payload.inputs.test_issue);
            if (!issue_number) {
              core.warning('No issue context available to link PR back (workflow_dispatch without test_issue).');
            } else {
              await github.rest.issues.createComment({
                owner, repo, issue_number,
                body: `Opened PR #${{ steps.pr.outputs.number }} to engage Codex. Track work there.`
              });
            }
