name: reusable python ci stack

on:
  workflow_call:
    inputs:
      run-lint:
        description: "Run lint checks (ruff/black/isort/docformatter)"
        required: false
        default: true
        type: boolean
      run-typecheck:
        description: "Run mypy type checks"
        required: false
        default: true
        type: boolean
      run-tests:
        description: "Run pytest test suite"
        required: false
        default: true
        type: boolean
      run-docker:
        description: "Run docker image build/test"
        required: false
        default: true
        type: boolean
      run-gate:
        description: "Run summary gate"
        required: false
        default: true
        type: boolean
      python-versions:
        description: "JSON array of Python versions for the test matrix"
        required: false
        default: '["3.11","3.12"]'
        type: string
      coverage-min:
        description: "Coverage threshold for pytest --cov-fail-under"
        required: false
        default: '80'
        type: string
      pytest-marker:
        description: "Pytest marker expression to select tests"
        required: false
        default: 'not quarantine and not slow'
        type: string
      install-extras:
        description: "Additional pip extras to install (comma separated)"
        required: false
        default: ''
        type: string
      docker-debug:
        description: "Enable verbose docker pytest output"
        required: false
        default: false
        type: boolean
      docker-health-port:
        description: "Health check port"
        required: false
        default: '8000'
        type: string
      docker-health-path:
        description: "Health check path"
        required: false
        default: '/health'
        type: string
      image-name:
        description: "Container image name"
        required: false
        default: ''
        type: string
      registry:
        description: "Container registry"
        required: false
        default: ''
        type: string

jobs:
  lint:
    if: inputs.run-lint
    name: lint (ruff/black/isort/docformatter)
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ fromJson(inputs.python-versions)[0] }}
      - name: Install dependencies
        run: |
          python -m pip install -U pip
          extras='${{ inputs.install-extras }}'
          if [ -n "$extras" ]; then
            pip install -e ".[dev]" $(echo "$extras" | tr ',' ' ')
          else
            pip install -e ".[dev]"
          fi
          pip install docformatter
      - name: Run ruff
        run: ruff check .
      - name: Run black
        run: black --check .
      - name: Run isort
        run: isort --profile black --check-only .
      - name: Run docformatter
        run: docformatter --check -r src tests

  typecheck:
    if: inputs.run-typecheck
    name: type-check (mypy)
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ fromJson(inputs.python-versions)[0] }}
      - name: Install dependencies
        run: |
          python -m pip install -U pip
          extras='${{ inputs.install-extras }}'
          if [ -n "$extras" ]; then
            pip install -e ".[dev]" $(echo "$extras" | tr ',' ' ')
          else
            pip install -e ".[dev]"
          fi
      - name: Run mypy
        run: mypy src/

  tests:
    if: inputs.run-tests
    name: tests (pytest)
    runs-on: ubuntu-latest
    permissions:
      contents: read
    strategy:
      fail-fast: false
      matrix:
        python: ${{ fromJson(inputs.python-versions) }}
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python }}
      - name: Install dependencies
        run: |
          python -m pip install -U pip
          extras='${{ inputs.install-extras }}'
          if [ -n "$extras" ]; then
            pip install -r requirements.txt
            pip install -e ".[dev]" $(echo "$extras" | tr ',' ' ')
          else
            pip install -r requirements.txt
            pip install -e ".[dev]"
          fi
      - name: Remove old coverage data
        run: rm -f .coverage .coverage.*
      - name: Run pytest
        env:
          PYTEST_MARK: ${{ inputs.pytest-marker }}
          COV_MIN: ${{ inputs.coverage-min }}
        run: |
          marker="$PYTEST_MARK"
          if [ -z "$marker" ]; then
            pytest --cov=src --cov-report=term-missing --cov-fail-under=$COV_MIN --cov-branch
          else
            pytest -m "$marker" --cov=src --cov-report=term-missing --cov-fail-under=$COV_MIN --cov-branch
          fi

  docker:
    if: inputs.run-docker
    name: docker build + smoke
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    env:
      REGISTRY: ${{ inputs.registry || vars.REGISTRY || 'ghcr.io' }}
      IMAGE_NAME: ${{ inputs.image-name || vars.IMAGE_NAME || format('{0}/{1}', github.repository_owner, github.event.repository.name) }}
      HEALTH_PORT: ${{ inputs.docker-health-port || vars.HEALTH_PORT || '8000' }}
      HEALTH_PATH: ${{ inputs.docker-health-path || vars.HEALTH_PATH || '/health' }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.sha || github.sha }}
      - name: Log in to container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build image
        run: docker build -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest .
      - name: Run test suite in container
        run: |
          if [ "${{ inputs.docker-debug }}" = "true" ]; then
            docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest pytest -v --tb=short
          else
            docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest pytest -q
          fi
      - name: Smoke test health endpoint
        run: |
          CONTAINER_ID=$(docker run -d -p ${{ env.HEALTH_PORT }}:${{ env.HEALTH_PORT }} ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest)
          max_attempts=10
          attempt=1
          while [ $attempt -le $max_attempts ]; do
            if curl -fs http://localhost:${{ env.HEALTH_PORT }}${{ env.HEALTH_PATH }} | grep -q "OK"; then
              echo "Health check passed on attempt $attempt"
              break
            fi
            sleep 1
            attempt=$((attempt+1))
          done
          docker stop "$CONTAINER_ID"
          docker rm "$CONTAINER_ID"
          if [ $attempt -gt $max_attempts ]; then
            echo "::error::Health check failed after $max_attempts attempts"
            exit 1
          fi
      - name: Push image
        if: github.event_name == 'push' && github.ref == 'refs/heads/phase-2-dev'
        run: docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest

  gate:
    if: inputs.run-gate
    name: gate / all required checks
    runs-on: ubuntu-latest
    needs:
      - lint
      - typecheck
      - tests
      - docker
    steps:
      - name: Evaluate job results
        env:
          LINT_RESULT: ${{ needs.lint.result }}
          TYPE_RESULT: ${{ needs.typecheck.result }}
          TEST_RESULT: ${{ needs.tests.result }}
          DOCKER_RESULT: ${{ needs.docker.result }}
        run: |
          echo "Lint result: ${LINT_RESULT:-skipped}"
          echo "Type result: ${TYPE_RESULT:-skipped}"
          echo "Tests result: ${TEST_RESULT:-skipped}"
          echo "Docker result: ${DOCKER_RESULT:-skipped}"
          for result in "$LINT_RESULT" "$TYPE_RESULT" "$TEST_RESULT" "$DOCKER_RESULT"; do
            if [ "$result" = "failure" ] || [ "$result" = "cancelled" ]; then
              echo "::error::One or more prerequisite jobs failed"
              exit 1
            fi
          done
      - name: Summary
        env:
          LINT_RESULT: ${{ needs.lint.result }}
          TYPE_RESULT: ${{ needs.typecheck.result }}
          TEST_RESULT: ${{ needs.tests.result }}
          DOCKER_RESULT: ${{ needs.docker.result }}
        run: |
          echo "### CI Summary" >> $GITHUB_STEP_SUMMARY
          echo "Lint: ${LINT_RESULT:-skipped}" >> $GITHUB_STEP_SUMMARY
          echo "Typecheck: ${TYPE_RESULT:-skipped}" >> $GITHUB_STEP_SUMMARY
          echo "Tests: ${TEST_RESULT:-skipped}" >> $GITHUB_STEP_SUMMARY
          echo "Docker: ${DOCKER_RESULT:-skipped}" >> $GITHUB_STEP_SUMMARY
