"""Ensure the pinned requirements file is in sync with ``pyproject.toml``.

The test normalises both the freshly compiled output and the existing
``requirements.lock`` file so that timestamp comments or command variations do
not cause spurious failures.
"""

from __future__ import annotations

import re
import subprocess
import shutil
from pathlib import Path
from unittest.mock import MagicMock, patch
import pytest


def _normalize_lockfile_content(content: str) -> str:
    """Strip unstable comment lines and normalise the compile command."""

    lines = []
    for line in content.splitlines():
        stripped = line.strip()
        if not stripped:
            continue
        if stripped.startswith("#"):
            # Keep static comments but filter out ones with timestamps or variable content
            # Use regex to detect comment lines that likely contain variable content

            # First check for uv command patterns and normalize them
            # Command with output file
            if re.search(r"^#\s*uv pip compile.*-o\s+\S+", line):
                # Replace with normalized version
                lines.append(
                    "#    uv pip compile pyproject.toml -o requirements.lock"
                )
                continue
            if re.match(r"^#\s*uv pip compile.*", stripped):
                lines.append("#    uv pip compile pyproject.toml -o requirements.lock")
                continue
            if re.search(r"\d{4}-\d{2}-\d{2}", stripped) or re.search(
                r"\d{2}:\d{2}", stripped
            ):
                continue
            # Filter lines that contain variable/generated content
            if re.search(r"autogenerated", stripped, re.IGNORECASE):
                continue
            lines.append(stripped)
        else:
            lines.append(stripped)
    return "\n".join(lines) + ("\n" if lines else "")


import pytest
import shutil

def test_lockfile_up_to_date() -> None:
    """Compare compiled dependencies with the committed lockfile."""

    # Skip if uv is not available
    if not shutil.which("uv"):
        pytest.skip("uv command not available")

    result = subprocess.run(
        ["uv", "pip", "compile", "pyproject.toml"],
        capture_output=True,
        text=True,
        check=True,
    )
    compiled = _normalize_lockfile_content(result.stdout)

    lock_path = Path("requirements.lock")
    assert lock_path.exists(), "requirements.lock file not found"
    existing = _normalize_lockfile_content(lock_path.read_text())

    assert (
        compiled == existing
    ), "requirements.lock is out of date. Run 'uv pip compile pyproject.toml -o requirements.lock' to update it."


def test_normalize_lockfile_content() -> None:
    """Check that normalisation removes volatile comment lines."""

    sample = """# This file was autogenerated by uv via the following command:
#    uv pip compile pyproject.toml -o requirements-2024-01-15.lock
# Generated on 2024-01-15 14:30:22
pkg==1.0.0
    # via something
"""

    expected = """#    uv pip compile pyproject.toml -o requirements.lock
pkg==1.0.0
# via something
"""

    assert _normalize_lockfile_content(sample) == expected


def test_lockfile_up_to_date_mock() -> None:
    """Smoke-test the lockfile check with mocked subprocess and filesystem."""

    mock_output = """# This file was autogenerated by uv via the following command:
#    uv pip compile pyproject.toml -o requirements.lock
pkg==1.0.0
"""

    with (
        patch("subprocess.run") as mock_run,
        patch("pathlib.Path.read_text") as mock_read,
        patch("pathlib.Path.exists") as mock_exists,
    ):
        mock_run.return_value = MagicMock(stdout=mock_output)
        mock_read.return_value = mock_output
        mock_exists.return_value = True

        # Should not raise
        test_lockfile_up_to_date()

        mock_run.assert_called_once_with(
            ["uv", "pip", "compile", "pyproject.toml"],
            capture_output=True,
            text=True,
            check=True,
        )
