from pathlib import Path
import subprocess
import re
from unittest.mock import patch


def _normalize_lockfile_content(content: str) -> str:
    """
    Normalize lockfile content by filtering out comment lines with timestamps
    or other variable content, keeping only the actual dependency specifications.
    """
    lines = content.splitlines()
    normalized_lines = []

    for line in lines:
        stripped = line.strip()
        # Skip empty lines
        if not stripped:
            continue

        # Handle comment lines
        if stripped.startswith("#"):
            # Keep static comments but filter out ones with timestamps or variable content
            # Use regex to detect comment lines that likely contain variable content

            # First check for uv command patterns and normalize them
            r"^#\s*uv pip compile.*-o\s+\S+", line
        ):  # Command with output file
                # Replace with normalized version
            normalized_lines.append(
                "#    uv pip compile pyproject.toml -o requirements.lock"
            )
            continue

            # Then check for date/time patterns in comments
            # Match dates in various formats, but avoid matching dates in dependency versions
            if re.search(
                r"#.*(Generated|created|updated).*\d{4}-\d{2}-\d{2}",
                line,
                re.IGNORECASE,
            ):
                continue
            if re.search(
                r"#.*with.*\d{4}-\d{2}-\d{2}", line
            ):  # "comment with 2024-01-15 date"
                continue
            if re.search(r"#.*\d{2}:\d{2}", line):  # Time patterns
                continue

            # Keep other comment lines as-is
            normalized_lines.append(line)
        else:
            # Keep all non-comment lines (actual dependencies)
            normalized_lines.append(line)

    return "\n".join(normalized_lines) + "\n" if normalized_lines else ""


def test_lockfile_up_to_date():
    """Test that the requirements.lock file is up-to-date with pyproject.toml."""
    result = subprocess.run(
        ["uv", "pip", "compile", "pyproject.toml"],
        capture_output=True,
        text=True,
        check=True,
    )

    compiled_content = _normalize_lockfile_content(result.stdout)

    lock_path = Path("requirements.lock")
    if not lock_path.exists():
        raise FileNotFoundError("requirements.lock file not found")

    existing_content = _normalize_lockfile_content(lock_path.read_text())

    assert (
        compiled_content == existing_content
    ), "requirements.lock is out of date. Run 'uv pip compile pyproject.toml -o requirements.lock' to update it."


def test_normalize_lockfile_content():
    """Test the normalization function with various types of content."""

    # Test content with timestamps and variable elements
    test_content = """# This file was autogenerated by uv via the following command:
#    uv pip compile pyproject.toml -o requirements-2024-01-15.lock
# Generated on 2024-01-15 14:30:22
annotated-types==0.7.0
    # via pydantic
attrs==25.3.0
    # via hypothesis
# Another comment with time 12:45 PM
numpy==2.3.2
    # via trend-model

pandas==2.3.2
    # via trend-model"""

    expected = """# This file was autogenerated by uv via the following command:
#    uv pip compile pyproject.toml -o requirements.lock
annotated-types==0.7.0
    # via pydantic
attrs==25.3.0
    # via hypothesis
numpy==2.3.2
    # via trend-model
pandas==2.3.2
    # via trend-model
"""

    result = _normalize_lockfile_content(test_content)
    assert result == expected

    # Test empty content
    assert _normalize_lockfile_content("") == ""

    # Test content with only comments
    comment_only = """# Some comment
# Another comment with 2024-01-15 date
# Normal comment"""

    expected_comment = """# Some comment
# Normal comment
"""

    result_comment = _normalize_lockfile_content(comment_only)
    assert result_comment == expected_comment


def test_lockfile_up_to_date_mock():
    """Test the lockfile consistency check with mocked subprocess."""

    mock_output = """# This file was autogenerated by uv via the following command:
#    uv pip compile pyproject.toml -o requirements.lock
pandas==2.3.2
    # via trend-model
"""

    mock_lockfile_content = """# This file was autogenerated by uv via the following command:
#    uv pip compile pyproject.toml -o requirements.lock
pandas==2.3.2
    # via trend-model
"""

    with (
        patch("subprocess.run") as mock_run,
        patch("pathlib.Path.read_text") as mock_read,
        patch("pathlib.Path.exists") as mock_exists,
    ):

        # Setup mocks
        mock_run.return_value.stdout = mock_output
        mock_read.return_value = mock_lockfile_content
        mock_exists.return_value = True

        # Should not raise any assertion error
        test_lockfile_up_to_date()

        # Verify subprocess was called correctly
        mock_run.assert_called_once_with(
            ["uv", "pip", "compile", "pyproject.toml"],
            capture_output=True,
            text=True,
            check=True,
        )
