"""Validate the schema of the run_meta export manifest.

These tests ensure that the metadata generated by :func:`export_bundle`
conforms to a simple JSON schema and that missing required fields are
properly detected.  They also exercise our handling of ``pd.date_range``
outputs by converting them to ISO formatted strings so the resulting JSON
matches the schema expectations.
"""

from __future__ import annotations

from dataclasses import dataclass
from pathlib import Path
import json
import zipfile

import pandas as pd
import jsonschema
import pytest

from trend_analysis.export.bundle import export_bundle


@dataclass
class DummyRun:
    """Minimal run object used for bundle export tests."""

    portfolio: pd.Series
    config: dict
    seed: int
    input_path: Path

    def summary(self) -> dict:
        return {"total_return": float(self.portfolio.sum())}


def _write_input(tmp_path: Path) -> Path:
    p = tmp_path / "input.csv"
    p.write_text("x\n1\n")
    return p


def _schema() -> dict:
    """Return the JSON schema for ``run_meta.json``."""

    return {
        "type": "object",
        "required": [
            "run_id",
            "config",
            "config_sha256",
            "seed",
            "environment",
            "git_hash",
            "receipt",
            "input_sha256",
        ],
        "properties": {
            "run_id": {"type": "string"},
            "config": {
                "type": "object",
                "properties": {
                    "dates": {
                        "type": "array",
                        "items": {"type": "string"},
                    }
                },
                "required": ["dates"],
            },
            "config_sha256": {"type": "string"},
            "seed": {"type": ["integer", "null"]},
            "environment": {"type": "object"},
            "git_hash": {"type": ["string", "null"]},
            "receipt": {
                "type": "object",
                "properties": {"created": {"type": "string"}},
                "required": ["created"],
            },
            "input_sha256": {"type": "string"},
        },
    }


def _build_meta(tmp_path: Path) -> dict:
    """Create a bundle and return the parsed ``run_meta`` contents."""

    input_path = _write_input(tmp_path)
    # Use month-end frequency explicitly and convert to strings for the config
    dates = pd.date_range("2020-01-31", periods=12, freq="ME")
    config = {"dates": dates.strftime("%Y-%m-%d").tolist()}

    run = DummyRun(
        portfolio=pd.Series(
            [0.01, -0.02], index=pd.date_range("2020-01", periods=2, freq="ME")
        ),
        config=config,
        seed=42,
        input_path=input_path,
    )

    out = tmp_path / "bundle.zip"
    export_bundle(run, out)

    with zipfile.ZipFile(out) as z:
        with z.open("run_meta.json") as f:
            meta = json.load(f)

    return meta


def test_run_meta_conforms_to_schema(tmp_path: Path) -> None:
    """The generated metadata should satisfy the schema."""

    meta = _build_meta(tmp_path)
    jsonschema.validate(meta, _schema())


def test_run_meta_missing_required_fails(tmp_path: Path) -> None:
    """Removing a required field should trigger validation failure."""

    meta = _build_meta(tmp_path)
    schema = _schema()
    meta.pop("run_id")

    with pytest.raises(jsonschema.ValidationError):
        jsonschema.validate(meta, schema)

