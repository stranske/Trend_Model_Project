diff --git a/README.md b/README.md
index 5be1805e33b61b2a91ba033f0667a6e294e16c59..f9e72466e5ecaafa97e897b695d4865b719d2a5f 100644
--- a/README.md
+++ b/README.md
@@ -5,32 +5,28 @@ This repository contains experiments and utilities for analyzing volatility-adju
 ## Notebooks
 
 - `Vol_Adj_Trend_Analysis1.2.TrEx.ipynb` – an earlier version of the analysis.
 - `Vol_Adj_Trend_Analysis1.3.TrEx.ipynb` – the current main notebook showing the full workflow.
 - Additional historical notebooks can be found under `notebooks/old` and `Old/`.
 
 ## Setup
 
 1. Install the required Python packages:
    ```bash
    pip install -r requirements.txt
    ```
    The `requirements.txt` file lists common data analysis libraries
    including `pandas`, `numpy`, `matplotlib`, `ipywidgets`, and
    `xlsxwriter`.
 2. Launch Jupyter Lab or Jupyter Notebook:
    ```bash
    jupyter lab
    # or
    jupyter notebook
    ```
 3. Open `Vol_Adj_Trend_Analysis1.3.TrEx.ipynb` and run the cells in order.
 
 ## Applying patches
 
-Some updates are provided as patch files. Apply them from the repository root with:
-
-```bash
-git apply -p1 <patchfile>
-```
-
-Replace `<patchfile>` with the patch you want to apply (for example `codex.patch`).
+Earlier revisions referenced patch files such as `codex.patch`. The contents of
+those patches are already included in the current repository state, so no manual
+patch application is required.
diff --git a/codex.patch b/codex.patch
deleted file mode 100644
index ade54f9d2ac28387f368160c03e4071000f30951..0000000000000000000000000000000000000000
--- a/codex.patch
+++ /dev/null
@@ -1,79 +0,0 @@
- (cd "$(git rev-parse --show-toplevel)" && git apply --3way <<'EOF' 
-diff --git a/__init__.py b/__init__.py
-new file mode 100644
-index 0000000000000000000000000000000000000000..e69de29bb2d1d6434b8b29ae775ad8c2e48c5391
-diff --git a/data_utils.py b/data_utils.py
-new file mode 100644
-index 0000000000000000000000000000000000000000..7ddd3f420ad36f4edd862bcfe26ed8749a07a5c1
---- /dev/null
-+++ b/data_utils.py
-@@ -0,0 +1,44 @@
-+import logging
-+from typing import Optional
-+import pandas as pd
-+
-+logger = logging.getLogger(__name__)
-+
-+
-+def load_csv(path: str) -> Optional[pd.DataFrame]:
-+    """Load a CSV expecting a 'Date' column.
-+
-+    Parameters
-+    ----------
-+    path : str
-+        Path to the CSV file.
-+
-+    Returns
-+    -------
-+    pandas.DataFrame or None
-+        The loaded DataFrame if successful, otherwise ``None``.
-+    """
-+    try:
-+        df = pd.read_csv(path, parse_dates=["Date"])
-+    except FileNotFoundError:
-+        logger.error(f"File not found: {path}")
-+        return None
-+    except pd.errors.EmptyDataError:
-+        logger.error(f"No data in file: {path}")
-+        return None
-+    except pd.errors.ParserError as e:
-+        logger.error(f"Parsing error in {path}: {e}")
-+        return None
-+    except ValueError as e:
-+        # Raised when parse_dates references a missing column
-+        logger.error(f"Missing 'Date' column in {path}")
-+        return None
-+
-+    if "Date" not in df.columns:
-+        logger.error(f"Validation failed ({path}): missing 'Date' column")
-+        return None
-+
-+    if df["Date"].isnull().any():
-+        logger.warning(f"Null values found in 'Date' column of {path}")
-+
-+    return df
-diff --git a/tests/test_refactor.py b/tests/test_refactor.py
-new file mode 100644
-index 0000000000000000000000000000000000000000..d2f916f44b661788ca6f5cfb4881cfda4ed30603
---- /dev/null
-+++ b/tests/test_refactor.py
-@@ -0,0 +1,16 @@
-+import sys
-+import pathlib
-+import pandas as pd
-+
-+# Ensure repository root is on the path
-+sys.path.insert(0, str(pathlib.Path(__file__).resolve().parents[1]))
-+from data_utils import load_csv
-+
-+
-+def test_load_csv_missing_date(tmp_path):
-+    data = pd.DataFrame({'A': [1, 2, 3]})
-+    csv_path = tmp_path / "nodate.csv"
-+    data.to_csv(csv_path, index=False)
-+
-+    result = load_csv(str(csv_path))
-+    assert result is None
- 
-EOF
-)
\ No newline at end of file
 
