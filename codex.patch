 (cd "$(git rev-parse --show-toplevel)" && git apply --3way <<'EOF' 
diff --git a/Vol_Adj_Trend_Analysis1.3.TrEx.ipynb b/Vol_Adj_Trend_Analysis1.3.TrEx.ipynb
index d4c8d6104af9aba0f599ef0f4fdaf075395b6c6b..4fb5d9d4e03f7fdd6f055fe247ecf7e0c1a76d0a 100644
--- a/Vol_Adj_Trend_Analysis1.3.TrEx.ipynb
+++ b/Vol_Adj_Trend_Analysis1.3.TrEx.ipynb
@@ -1,47 +1,47 @@
 {
  "cells": [
   {
    "cell_type": "markdown",
    "id": "22994893-0193-45bc-b9e3-a97b328ecaea",
    "metadata": {},
    "source": [
     "# Volatility Scaling & Portfolio Analysis\n",
     "\n",
     "This notebook demonstrates how to:\n",
     "1. Imports, Data Loader and Rf Detector\n",
     "2. Select fund (month period logic)\n",
     "3. Weight prep\n",
     "4. Core Stats + Run Analysis\n",
     "5. Export\n",
     "6. Widget /UI\n",
     "7. Output in-sample and out-of-sample results to Excel with formatting."
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": 1,
+   "execution_count": null,
    "id": "30ea203f",
    "metadata": {
     "tags": []
    },
    "outputs": [],
    "source": [
     "# ===============================================================\n",
     "#      VOL-ADJ TREND ANALYSIS  –  SINGLE-FILE VERSION\n",
     "# ===============================================================\n",
     "\n",
     "# ───────────────────────────────────────────────────────────────\n",
     "#  0 · IMPORTS  (all in one place)\n",
     "# ───────────────────────────────────────────────────────────────\n",
     "import pandas as pd\n",
     "import numpy as np\n",
     "from dataclasses import dataclass, field\n",
     "from collections import namedtuple\n",
     "import xlsxwriter\n",
     "import logging\n",
     "from io import BytesIO\n",
     "import ipywidgets as widgets\n",
     "from IPython.display import display, clear_output\n",
     "from ipyfilechooser import FileChooser\n",
     "from typing import List, Dict, Optional, Callable\n",
     "\n",
@@ -228,51 +228,51 @@
     "        logger.error(f\"Validation failed ({path}): missing 'Date' column\")\n",
     "        return None\n",
     "\n",
     "    # Optionally check for NaNs in 'Date' column\n",
     "    if df[\"Date\"].isnull().any():\n",
     "        logger.warning(f\"Null values found in 'Date' column of {path}\")\n",
     "\n",
     "    return df\n",
     "\n",
     "def identify_risk_free_fund(df: pd.DataFrame) -> str:\n",
     "    returns = df.drop(columns=\"Date\", errors=\"ignore\")\n",
     "    stdevs  = returns.std(skipna=True, ddof=0)\n",
     "    return stdevs.idxmin()"
    ]
   },
   {
    "cell_type": "markdown",
    "id": "9e7a576b-aa3f-42e0-bfdc-f4a950b7d97c",
    "metadata": {},
    "source": [
     "## 2. Select Funds"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": 2,
+   "execution_count": null,
    "id": "ff528d69-5a52-4b75-8af4-17974826f4ab",
    "metadata": {},
    "outputs": [],
    "source": [
     "# ===============================================================\n",
     "# 2 · SELECT_FUNDS  (restored ≤ 3-missing-months rule)\n",
     "# ===============================================================\n",
     "\n",
     "cfg = FundSelectionConfig(\n",
     "    max_missing_months           = 3,\n",
     "    max_consecutive_month_gap    = 6,\n",
     "    outlier_threshold            = 0.5,\n",
     "    zero_return_threshold        = 0.2,\n",
     "    enforce_monotonic_index      = True,\n",
     "    allow_duplicate_dates        = False,\n",
     "    max_missing_ratio            = 0.05,\n",
     "    max_drawdown                 = 0.3,\n",
     "    min_volatility               = 0.05,\n",
     "    max_volatility               = 1.0,\n",
     "    min_avg_return               = 0.0,\n",
     "    max_skewness                 = 3.0,\n",
     "    max_kurtosis                 = 10.0,\n",
     "    expected_freq                = \"B\",\n",
     "    max_gap_days                 = 3,\n",
     "    min_aum_usd                  = 1e7,\n",
@@ -357,93 +357,93 @@
     "\n",
     "    # Final selection-mode logic\n",
     "    if selection_mode == \"all\" or random_n is None:\n",
     "        return eligible_funds\n",
     "    if selection_mode == \"random\":\n",
     "        if random_n > len(eligible_funds):\n",
     "            raise ValueError(\n",
     "                f\"random_n exceeds eligible pool: {random_n} > {len(eligible_funds)}\"\n",
     "            )\n",
     "        return list(np.random.choice(eligible_funds, random_n, replace=False))\n",
     "\n",
     "    raise ValueError(f\"Unsupported selection_mode '{selection_mode}'\")\n",
     "\n"
    ]
   },
   {
    "cell_type": "markdown",
    "id": "ac53bc18",
    "metadata": {},
    "source": [
     "## 3. Weight Prep"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": 3,
+   "execution_count": null,
    "id": "59a9bf13",
    "metadata": {},
    "outputs": [],
    "source": [
     "# ───────────────────────────────────────────────────────────────\n",
     "#  3 · WEIGHT PREP\n",
     "# ───────────────────────────────────────────────────────────────\n",
     "def prepare_weights(selected: list[str],\n",
     "                    custom: Dict[str, int] | None) -> tuple[Dict[str, float], np.ndarray]:\n",
     "    if not custom:\n",
     "        w = {f: 1/len(selected) for f in selected}\n",
     "    else:\n",
     "        missing = [f for f in selected if f not in custom]\n",
     "        if missing:\n",
     "            raise ValueError(f\"Missing weights for {missing}\")\n",
     "        w = {f: pct/100 for f, pct in custom.items()}\n",
     "        if abs(sum(w.values()) - 1) > 1e-6:\n",
     "            raise ValueError(\"Custom weights must sum to 100.\")\n",
     "    vec = np.array([w[f] for f in selected])\n",
     "    return w, vec"
    ]
   },
   {
    "cell_type": "markdown",
    "id": "b3666a84",
    "metadata": {},
    "source": [
     "## 4. Analysis (In-Sample & Out-of-Sample)\n",
     "The `run_analysis` function orchestrates the entire process:\n",
     "- Function definitions\n",
     "- Validates date inputs.\n",
     "- Converts 'Date' column.\n",
     "- Identifies risk-free column.\n",
     "- Fills short gaps.\n",
     "- Selects funds.\n",
     "- Computes in-sample scaling factors and applies them in- and out-of-sample.\n",
     "- Computes individual fund stats and portfolio stats."
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": 4,
+   "execution_count": null,
    "id": "72976bb9-5ceb-4a2f-953d-193aca9aab44",
    "metadata": {},
    "outputs": [],
    "source": [
     "# ===============================================================\n",
     "# 4 · CORE STATS  +  RUN_ANALYSIS  (helpers included, weight fix)\n",
     "# ===============================================================\n",
     "\n",
     "M_PER_YEAR = 12           # constant used across helpers\n",
     "\n",
     "# ---------- helpers --------------------------------------------\n",
     "def _ensure_dt(df: pd.DataFrame) -> pd.DataFrame:\n",
     "    \"\"\"Return a copy whose Date column is datetime64[ns].\"\"\"\n",
     "    if pd.api.types.is_datetime64_any_dtype(df[\"Date\"]):\n",
     "        return df\n",
     "    df = df.copy()\n",
     "    df[\"Date\"] = pd.to_datetime(df[\"Date\"], errors=\"coerce\")\n",
     "    df.dropna(subset=[\"Date\"], inplace=True)\n",
     "    return df\n",
     "\n",
     "# 3. Metric function definitions\n",
     "# === Metric Function Definitions with flexible annualization ===\n",
     "@register_metric(\"AnnualReturn\")\n",
     "def compute_annual_return(\n",
     "    returns: pd.Series,\n",
@@ -682,51 +682,51 @@
     "\n",
     "    # ---- optional index stats ---------------------------------------\n",
     "    if indices_list:\n",
     "        idx_stats = {}\n",
     "        for col in indices_list:\n",
     "            idx_stats[col] = {\n",
     "                \"in_sample\":  _stats(df.loc[m_in,  col], stats_cfg),\n",
     "                \"out_sample\": _stats(df.loc[m_out, col], stats_cfg),\n",
     "            }\n",
     "        results[\"index_stats\"] = idx_stats\n",
     "\n",
     "    return results\n"
    ]
   },
   {
    "cell_type": "markdown",
    "id": "183dc5df",
    "metadata": {},
    "source": [
     "## 5. Excel Export\n",
     "Creates an Excel file with In-Sample, Out-of-Sample and Equal-weight and User-weight."
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": 5,
+   "execution_count": null,
    "id": "8e2cce23",
    "metadata": {},
    "outputs": [],
    "source": [
     "# ───────────────────────────────────────────────────────────────\n",
     "#  5 · EXPORT  (NaN-safe, weight-format fix)\n",
     "# ───────────────────────────────────────────────────────────────\n",
     "# ───────── 5 · EXPORT  (final, bug-free) ───────────────────────\n",
     "# ───────── 5 · EXPORT  (self-healing index section) ───────────\n",
     "# ───────── 5 · EXPORT  (final safe version) ───────────────────\n",
     "\n",
     "def export_to_excel(\n",
     "    data: dict[str, pd.DataFrame],\n",
     "    output_path: str,\n",
     "    default_format: Optional[Callable] = None\n",
     ") -> None:\n",
     "    \"\"\"\n",
     "    Exports each DataFrame in `data` to its own sheet in `output_path`.\n",
     "    Applies a registered formatter for each category (sheet name).\n",
     "    If no formatter is found, applies `default_format` if provided.\n",
     "\n",
     "    For the Summary sheet, data is written starting at row 5 to make room for custom headers.\n",
     "    \"\"\"\n",
     "    startrows = {\"summary\": 5}\n",
     "    with pd.ExcelWriter(output_path, engine=\"xlsxwriter\") as writer:\n",
@@ -748,71 +748,56 @@
    ]
   },
   {
    "cell_type": "markdown",
    "id": "86794206",
    "metadata": {},
    "source": [
     "### Using This Notebook\n",
     "1. Run all cells.\n",
     "2. Call `demo_run()` in a new cell to see a quick example with dummy data.\n",
     "3. To use your own data, load it into a DataFrame (make sure it has a 'Date' column and decimal returns in other columns), then call `run_analysis()` and `export_to_excel()`.\n",
     "4. For interactive selection, do:\n",
     "   ```python\n",
     "   display(ui_inputs)\n",
     "   ```\n",
     "   Then wire the `apply_button` to a callback function that reads the widget values and runs `run_analysis()`.\n",
     "5. For custom weights, call:\n",
     "   ```python\n",
     "   my_weights = get_custom_weights(selected_funds)\n",
     "   ```\n",
     "   Then pass `my_weights` into your logic.\n"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": 6,
+   "execution_count": null,
    "id": "687e0d59-d17a-41c8-b991-1d91d29a22d1",
    "metadata": {
     "outputId": "795bb6da-96a0-42e2-c760-7d516fd82610"
    },
-   "outputs": [
-    {
-     "data": {
-      "application/vnd.jupyter.widget-view+json": {
-       "model_id": "a06795615b8b43fbaa82eeb12c99953b",
-       "version_major": 2,
-       "version_minor": 0
-      },
-      "text/plain": [
-       "VBox(children=(HTML(value='<h4>1. Load data</h4>'), ToggleButtons(description='Source:', options=(('Local', 'l…"
-      ]
-     },
-     "metadata": {},
-     "output_type": "display_data"
-    }
-   ],
+   "outputs": [],
    "source": [
     "# ===============================================================\n",
     "#            STREAMLINED ANALYSIS UI  (phase-2 clean)\n",
     "# ===============================================================\n",
     "\n",
     "# ---------- session store ----------\n",
     "session = {\"df\": None, \"rf\": None, \"sel\": None, \"cweights\": None}\n",
     "\n",
     "# ---------- 1 · DATA LOAD ----------\n",
     "src = widgets.ToggleButtons(\n",
     "    options=[(\"Local\", \"local\"), (\"URL\", \"url\")],\n",
     "    description=\"Source:\"\n",
     ")\n",
     "\n",
     "chooser = FileChooser()\n",
     "url_box = widgets.Text(placeholder=\"https://…/file.csv\", layout={\"width\":\"70%\"})\n",
     "load_btn = widgets.Button(description=\"Load CSV\", button_style=\"success\")\n",
     "load_out = widgets.Output()\n",
     "\n",
     "def _toggle_src(c):\n",
     "    chooser.layout.display = \"block\" if c[\"new\"]==\"local\" else \"none\"\n",
     "    url_box.layout.display  = \"block\" if c[\"new\"]==\"url\"   else \"none\"\n",
     "src.observe(_toggle_src, names=\"value\"); _toggle_src({\"new\":src.value})\n",
     "\n",
     "def _load(_):\n",
@@ -992,81 +977,73 @@
     "        # Export — this will call fmt_summary(ws, wb) on the 'summary' sheet.\n",
     "        export_to_excel(data, fname)\n",
     "        print(\"Workbook saved as\", fname)\n",
     "\n",
     "run_btn.on_click(_run)\n",
     "\n",
     "# ---------- DISPLAY --------------\n",
     "display(widgets.VBox([\n",
     "    widgets.HTML(\"<h4>1. Load data</h4>\"),\n",
     "    src, chooser, url_box, load_btn, load_out,\n",
     "    widgets.HTML(\"<hr><h4>2. Parameters</h4>\"),\n",
     "    widgets.HBox([index_cnt]),\n",
     "    widgets.HBox([in_start,in_end,out_start,out_end]),\n",
     "    widgets.HBox([target_vol,monthly_cost]),\n",
     "    widgets.HTML(\"<hr><h4>3. Fund selection</h4>\"),\n",
     "    widgets.HBox([mode_dd,rand_n]),\n",
     "    fund_table, total_lbl,\n",
     "    widgets.HTML(\"<hr>\"),\n",
     "    run_btn,\n",
     "    run_out\n",
     "]))\n"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": 11,
+   "execution_count": null,
    "id": "d599f6a9-8055-42be-abf1-fd2ab3efee44",
    "metadata": {},
-   "outputs": [
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "['Date', 'Risk-Free Rate', 'Quantum Capital', 'Crescent Strategies', 'Echo Advisors', 'Quantum Group', 'Quantum LP', 'Meridian Capital', 'Adaptive Partners', 'Echo Strategies', 'Vista LP', 'Adaptive Group', 'Echo Group', 'Meridian Strategies', 'Axiom LP', 'Crescent Capital', 'Sentinel Management', 'Ascent Holdings', 'Sentinel Strategies', 'Ascent Partners', 'Quantum Management', 'Quantum Investments', 'Ascent LP', 'Axiom Group', 'Crescent LP', 'Echo Partners', 'Adaptive Strategies', 'Crescent Partners', 'Meridian Holdings', 'Axiom Investments', 'Sentinel Investments', 'Ascent Strategies', 'Forge Advisors', 'Vista Strategies', 'Sentinel Global', 'Ascent Capital', 'Echo Capital', 'Ascent Management', 'Echo LP', 'Axiom Management', 'Axiom Advisors', 'Crescent Advisors', 'Vista Holdings', 'Forge Management', 'Sentinel Group', 'Axiom Partners', 'Sentinel Advisors', 'Meridian LP', 'Crescent Group', 'Crescent Management', 'Adaptive Holdings', 'Vista Advisors', 'Vista Partners', 'Forge Strategies', 'Vista Capital', 'Forge Investments', 'Axiom Capital', 'Forge Partners', 'Quantum Global', 'Sentinel Holdings', 'Ascent Global', 'Vista Global', 'Quantum Strategies', 'Forge Group', 'Adaptive Investments', 'Echo Holdings', 'Axiom Strategies', 'Forge LP', 'Meridian Global', 'Adaptive Management', 'Meridian Advisors', 'Crescent Global', 'Axiom Global', 'Echo Management', 'Adaptive Advisors', 'Axiom Holdings', 'Meridian Group', 'Adaptive Capital', 'Forge Global', 'Vista Group', 'Sentinel Capital', 'Sentinel Partners', 'Forge Capital', 'Echo Investments', 'Adaptive Global', 'Quantum Partners', 'Crescent Holdings', 'Ascent Advisors', 'Quantum Advisors', 'Ascent Group', 'Quantum Holdings', 'Sentinel LP', 'Meridian Investments', 'Meridian Partners', 'Meridian Management', 'Forge Holdings', 'Echo Global', 'Ascent Investments', 'Adaptive LP', 'Crescent Investments', 'Vista Investments', 'Vista Management', 'EqualWeight_60', 'EqualWeight_40']\n"
-     ]
-    }
-   ],
+   "outputs": [],
    "source": [
     "# 1. Run the cell that defines load_csv and call it\n",
     "dt = load_csv(\"/Users/teacher/Library/CloudStorage/Dropbox/Learning/Code/Trend Modeling Project/hedge_fund_returns_with_indexes.csv\")\n",
     "\n",
     "# 2. Capture all original fields (Date + fund columns)\n",
     "col_list = dt.columns.tolist()\n",
     "print(col_list)\n",
     "\n",
     "# 3.  (Optional)  Save to CSV for your spec\n",
     "import pandas as pd\n",
     "pd.DataFrame({\"ColumnName\": col_list}).to_csv(\"variable_spec.csv\", index=False)\n"
    ]
   },
   {
    "cell_type": "code",
    "execution_count": null,
    "id": "48c282dc-8a97-4a3f-9832-a6000bf5f285",
    "metadata": {},
    "outputs": [],
    "source": []
   }
  ],
  "metadata": {
   "kernelspec": {
    "display_name": "Python (base)",
    "language": "python",
    "name": "base"
   },
   "language_info": {
    "codemirror_mode": {
     "name": "ipython",
     "version": 3
    },
    "file_extension": ".py",
    "mimetype": "text/x-python",
    "name": "python",
    "nbconvert_exporter": "python",
    "pygments_lexer": "ipython3",
    "version": "3.12.2"
   }
  },
  "nbformat": 4,
  "nbformat_minor": 5
-}
+}
\ No newline at end of file
 
EOF
)