 (cd "$(git rev-parse --show-toplevel)" && git apply --3way <<'EOF' 
diff --git a/Vol_Adj_Trend_Analysis1.3.TrEx.ipynb b/Vol_Adj_Trend_Analysis1.3.TrEx.ipynb
index 4fb5d9d4e03f7fdd6f055fe247ecf7e0c1a76d0a..a035e5ce5b1bcc93fe83850a81faedc46012ab61 100644
--- a/Vol_Adj_Trend_Analysis1.3.TrEx.ipynb
+++ b/Vol_Adj_Trend_Analysis1.3.TrEx.ipynb
@@ -58,57 +58,57 @@
     "    outlier_threshold: float = 0.5\n",
     "    zero_return_threshold: float = 0.2\n",
     "    enforce_monotonic_index: bool = True\n",
     "    allow_duplicate_dates: bool = False\n",
     "    max_missing_ratio: float      = 0.05\n",
     "    max_drawdown: float           = 0.3\n",
     "    min_volatility: float         = 0.05\n",
     "    max_volatility: float         = 1.0\n",
     "    min_avg_return: float         = 0.0\n",
     "    max_skewness: float           = 3.0\n",
     "    max_kurtosis: float           = 10.0\n",
     "    expected_freq: str            = \"B\"\n",
     "    max_gap_days: int             = 3\n",
     "    min_aum_usd: float            = 1e7\n",
     "\n",
     "# Configuration dataclass\n",
     "@dataclass\n",
     "class RiskStatsConfig:\n",
     "    metrics_to_run: List[str] = field(default_factory=lambda: [\n",
     "        \"AnnualReturn\", \"Volatility\", \"Sharpe\", \"Sortino\", \"MaxDrawdown\"\n",
     "    ])\n",
     "    risk_free: float = 0.0\n",
     "    periods_per_year: int = 12\n",
     "\n",
     "# 2. Registry and decorator\n",
-    "METRIC_REGISTRY: Dict[str, Callable[[pd.Series, float, int], float]] = {}\n",
+    "METRIC_REGISTRY: Dict[str, Callable[..., float]] = {}\n",
     "\n",
     "def register_metric(name: str):\n",
     "    \"\"\"\n",
     "    Decorator to register a metric function under a given name.\n",
     "    \"\"\"\n",
-    "    def decorator(fn: Callable[pd.Series, float]):\n",
+    "    def decorator(fn: Callable[[pd.Series], float]):\n",
     "        METRIC_REGISTRY[name] = fn\n",
     "        return fn\n",
     "    return decorator\n",
     "\n",
     "FORMATTERS_EXCEL: dict[str, Callable] = {}\n",
     "def register_formatter_excel(category: str):\n",
     "    def decorator(fn: Callable):\n",
     "        FORMATTERS_EXCEL[category] = fn\n",
     "        return fn\n",
     "    return decorator\n",
     "\n",
     "# Example formatters (extend as needed)\n",
     "def safe(v):\n",
     "    \"\"\"\n",
     "    Return blank string for missing/non-finite values; else return the value.\n",
     "    \"\"\"\n",
     "    if v == \"\" or pd.isna(v):\n",
     "        return \"\"\n",
     "    if isinstance(v, (int, float, np.generic)):\n",
     "        return v if np.isfinite(v) else \"\"\n",
     "    return \"\"\n",
     "\n",
     "def pct(t: tuple[float, float, float, float, float]) -> list[float]:\n",
     "    \"\"\"\n",
     "    Convert a Stat tuple of five elements into a list of values scaled as percentages for\n",
 
EOF
)