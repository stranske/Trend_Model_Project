 (cd "$(git rev-parse --show-toplevel)" && git apply --3way <<'EOF' 
diff --git a/exports.py b/exports.py
new file mode 100644
index 0000000000000000000000000000000000000000..5feee3228eca92e4859095b597746f23a286aef8
--- /dev/null
+++ b/exports.py
@@ -0,0 +1,98 @@
+"""Unified export functions for trend analysis results."""
+
+from __future__ import annotations
+
+from pathlib import Path
+from typing import Callable, Iterable, Mapping
+
+import pandas as pd
+
+Formatter = Callable[[pd.DataFrame], pd.DataFrame]
+
+
+def _ensure_dir(path: Path) -> None:
+    """Create parent directories for the given path."""
+    path.parent.mkdir(parents=True, exist_ok=True)
+
+
+def _apply_format(df: pd.DataFrame, formatter: Formatter | None) -> pd.DataFrame:
+    """Return ``df`` after applying the optional ``formatter``."""
+    return formatter(df) if formatter else df
+
+
+def export_to_excel(
+    data: Mapping[str, pd.DataFrame],
+    output_path: str,
+    formatter: Formatter | None = None,
+) -> None:
+    """Export dataframes to an Excel workbook."""
+    path = Path(output_path)
+    _ensure_dir(path)
+    with pd.ExcelWriter(path) as writer:
+        for sheet, df in data.items():
+            formatted = _apply_format(df, formatter)
+            formatted.to_excel(writer, sheet_name=sheet, index=False)
+
+
+def export_to_csv(
+    data: Mapping[str, pd.DataFrame],
+    output_path: str,
+    formatter: Formatter | None = None,
+) -> None:
+    """Export each dataframe to an individual CSV file using ``output_path`` as prefix."""
+    prefix = Path(output_path)
+    _ensure_dir(prefix)
+    for name, df in data.items():
+        formatted = _apply_format(df, formatter)
+        formatted.to_csv(prefix.with_name(f"{prefix.stem}_{name}.csv"), index=False)
+
+
+def export_to_json(
+    data: Mapping[str, pd.DataFrame],
+    output_path: str,
+    formatter: Formatter | None = None,
+) -> None:
+    """Export each dataframe to an individual JSON file using ``output_path`` as prefix."""
+    prefix = Path(output_path)
+    _ensure_dir(prefix)
+    for name, df in data.items():
+        formatted = _apply_format(df, formatter)
+        formatted.to_json(
+            prefix.with_name(f"{prefix.stem}_{name}.json"), orient="records", indent=2
+        )
+
+
+EXPORTERS: dict[
+    str, Callable[[Mapping[str, pd.DataFrame], str, Formatter | None], None]
+] = {
+    "xlsx": export_to_excel,
+    "csv": export_to_csv,
+    "json": export_to_json,
+}
+
+
+def export_data(
+    data: Mapping[str, pd.DataFrame],
+    output_path: str,
+    formats: Iterable[str],
+    formatter: Formatter | None = None,
+) -> None:
+    """Export ``data`` to the specified ``formats``.
+
+    Parameters
+    ----------
+    data:
+        Mapping of sheet names to DataFrames.
+    output_path:
+        Base path for exported files. Extension will be replaced per format.
+    formats:
+        Iterable of format strings, e.g. ["xlsx", "csv", "json"].
+    formatter:
+        Optional function applied to each DataFrame before saving.
+    """
+    for fmt in formats:
+        exporter = EXPORTERS.get(fmt)
+        if exporter is None:
+            raise ValueError(f"Unsupported format: {fmt}")
+        path = str(Path(output_path).with_suffix(f".{fmt}"))
+        exporter(data, path, formatter)
diff --git a/tests/test_analysis.py b/tests/test_analysis.py
index 22a692738008d5da439885129b24fcd6abbcb685..200944fca5ca6c1094d7a282a05d4aa8fe867642 100644
--- a/tests/test_analysis.py
+++ b/tests/test_analysis.py
@@ -1,17 +1,21 @@
 import importlib.util
 import pathlib
 import pytest
 
-# Dynamically load the cleanup module from its file path
-module_path = pathlib.Path(__file__).resolve().parents[1] / 'Old' / 'Vol_Adj_Trend_Analysis_Cleanup.py'
-spec = importlib.util.spec_from_file_location('cleanup', module_path)
+module_path = (
+    pathlib.Path(__file__).resolve().parents[1]
+    / "Old"
+    / "Vol_Adj_Trend_Analysis_Cleanup.py"
+)
+spec = importlib.util.spec_from_file_location("cleanup", module_path)
+assert spec and spec.loader
 cleanup = importlib.util.module_from_spec(spec)
 spec.loader.exec_module(cleanup)
 
 
 def test_run_analysis_returns_none():
     assert cleanup.run_analysis(None, None, None, None, None, None, None) is None
 
 
 def test_prepare_weights_missing():
-    assert not hasattr(cleanup, 'prepare_weights')
+    assert not hasattr(cleanup, "prepare_weights")
diff --git a/tests/test_exports.py b/tests/test_exports.py
new file mode 100644
index 0000000000000000000000000000000000000000..cdd7c78cb174cb4cc188d121de536380e89556a0
--- /dev/null
+++ b/tests/test_exports.py
@@ -0,0 +1,23 @@
+import sys
+import pathlib
+import pandas as pd
+
+sys.path.insert(0, str(pathlib.Path(__file__).resolve().parents[1]))
+from exports import export_data
+
+
+def test_export_data(tmp_path):
+    df1 = pd.DataFrame({"A": [1, 2]})
+    df2 = pd.DataFrame({"B": [3, 4]})
+    data = {"sheet1": df1, "sheet2": df2}
+    out = tmp_path / "report"
+    export_data(data, str(out), formats=["xlsx", "csv", "json"])
+
+    assert (tmp_path / "report.xlsx").exists()
+    assert (tmp_path / "report_sheet1.csv").exists()
+    assert (tmp_path / "report_sheet2.csv").exists()
+    assert (tmp_path / "report_sheet1.json").exists()
+    assert (tmp_path / "report_sheet2.json").exists()
+
+    read = pd.read_csv(tmp_path / "report_sheet1.csv")
+    pd.testing.assert_frame_equal(read, df1)
diff --git a/tests/test_refactor.py b/tests/test_refactor.py
index d2f916f44b661788ca6f5cfb4881cfda4ed30603..4d8f8e31567435a3e77258dd43f3d50724bbbd78 100644
--- a/tests/test_refactor.py
+++ b/tests/test_refactor.py
@@ -1,16 +1,16 @@
 import sys
 import pathlib
 import pandas as pd
 
 # Ensure repository root is on the path
 sys.path.insert(0, str(pathlib.Path(__file__).resolve().parents[1]))
 from data_utils import load_csv
 
 
 def test_load_csv_missing_date(tmp_path):
-    data = pd.DataFrame({'A': [1, 2, 3]})
+    data = pd.DataFrame({"A": [1, 2, 3]})
     csv_path = tmp_path / "nodate.csv"
     data.to_csv(csv_path, index=False)
 
     result = load_csv(str(csv_path))
     assert result is None
 
EOF
)