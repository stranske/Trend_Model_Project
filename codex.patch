 (cd "$(git rev-parse --show-toplevel)" && git apply --3way <<'EOF' 
diff --git a/Vol_Adj_Trend_Analysis1.3.TrEx.ipynb b/Vol_Adj_Trend_Analysis1.3.TrEx.ipynb
index c0a59b0ba5b8b4c9c104291ddaffcd8ef91851e2..9a3b97e048c9b9ad90c4a1408b6563a719d89d2d 100644
--- a/Vol_Adj_Trend_Analysis1.3.TrEx.ipynb
+++ b/Vol_Adj_Trend_Analysis1.3.TrEx.ipynb
@@ -93,53 +93,50 @@
     "\n",
     "FORMATTERS_EXCEL: dict[str, Callable] = {}\n",
     "def register_formatter_excel(category: str):\n",
     "    def decorator(fn: Callable):\n",
     "        FORMATTERS_EXCEL[category] = fn\n",
     "        return fn\n",
     "    return decorator\n",
     "\n",
     "# Example formatters (extend as needed)\n",
     "def safe(v):\n",
     "    \"\"\"\n",
     "    Return blank string for missing/non-finite values; else return the value.\n",
     "    \"\"\"\n",
     "    if v == \"\" or pd.isna(v):\n",
     "        return \"\"\n",
     "    if isinstance(v, (int, float, np.generic)):\n",
     "        return v if np.isfinite(v) else \"\"\n",
     "    return \"\"\n",
     "\n",
     "def pct(t: tuple[float, float, float, float, float]) -> list[float]:\n",
     "    \"\"\"\n",
     "    Convert a Stat tuple of five elements into a list of values scaled as percentages for\n",
     "    the 1st, 2nd, and 5th elements.\n",
     "    \"\"\"\n",
     "    return [t[0]*100, t[1]*100, t[2], t[3], t[4]*100]\n",
-    "    if isinstance(v, (int, float, np.generic)):\n",
-    "        return v if np.isfinite(v) else \"\"\n",
-    "    return \"\"\n",
     "\n",
     "# Consolidated Summary Formatter Factory\n",
     "\n",
     "def make_summary_formatter(\n",
     "    res: dict,\n",
     "    in_start: str,\n",
     "    in_end: str,\n",
     "    out_start: str,\n",
     "    out_end: str\n",
     "):\n",
     "    \"\"\"\n",
     "    Registers a single 'summary' sheet formatter that writes:\n",
     "      1. Portfolio rows (Equal & User weight),\n",
     "      2. Blank spacer,\n",
     "      3. Fund rows,\n",
     "      4. Blank spacer,\n",
     "      5. Index rows\n",
     "    using the data in `res`.\n",
     "    \"\"\"\n",
     "    @register_formatter_excel(\"summary\")\n",
     "    def fmt_summary(ws, wb):\n",
     "        # Predefine formats\n",
     "        bold = wb.add_format({\"bold\": True})\n",
     "        headers = [\n",
     "            \"Name\", \"Weight %\", \"EW %\",\n",
 
EOF
)